import { UseCase } from '../../../Shared/application/UseCase';
import { Result } from '../../../Shared/domain/Result';
import { Post, PostMetadata } from '../../Domain/entities/Post';
import { IPostRepository } from '../../Domain/repositories/IPostRepository';
import { logger } from '../../../Shared/infrastructure/Logger';

export interface GeneratePostFromEventRequest {
  eventName: string;
  eventDescription: string;
  eventDate: Date;
  eventType: string;
  metadata?: Partial<PostMetadata>;
}

export class GeneratePostFromEventUseCase extends UseCase<GeneratePostFromEventRequest, Post> {
  constructor(private postRepository: IPostRepository) {
    super();
  }

  protected validateRequest(request: GeneratePostFromEventRequest): Result<GeneratePostFromEventRequest> {
    if (!request.eventName || request.eventName.trim().length === 0) {
      return Result.fail('–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ');
    }
    if (!request.eventDescription || request.eventDescription.trim().length === 0) {
      return Result.fail('–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ');
    }
    if (!request.eventDate || !(request.eventDate instanceof Date)) {
      return Result.fail('–î–∞—Ç–∞ —Å–æ–±—ã—Ç–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞');
    }
    if (!request.eventType || request.eventType.trim().length === 0) {
      return Result.fail('–¢–∏–ø —Å–æ–±—ã—Ç–∏—è –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
    }
    return Result.ok(request);
  }

  async execute(request: GeneratePostFromEventRequest): Promise<Result<Post>> {
    try {
      logger.info(`–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞ –¥–ª—è —Å–æ–±—ã—Ç–∏—è: ${request.eventName}`);

      const validationResult = this.validateRequest(request);
      if (!validationResult.isSuccess) {
        return Result.fail(validationResult.error);
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–±—ã—Ç–∏—è
      const title = `üåü ${request.eventName}`;
      const content = this.generateContent(request);

      // –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π PostMetadata
      const metadata: PostMetadata = {
        template: 'astronomical_event',
        variables: {
          eventName: request.eventName,
          eventType: request.eventType,
          eventDate: request.eventDate.toISOString(),
          description: request.eventDescription
        },
        tags: ['–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—è', request.eventType.toLowerCase()],
        priority: 'medium',
        astronomicalEvents: [request.eventName],
        ...request.metadata
      };

      const post = new Post(
        crypto.randomUUID(),
        title,
        content,
        'draft',
        'astronomical',
        request.eventDate,
        metadata,
        'admin',
        undefined,
        []
      );

      const saveResult = await this.postRepository.save(post);
      if (!saveResult.isSuccess) {
        return Result.fail(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å—Ç–∞: ${saveResult.error}`);
      }

      logger.info(`–ü–æ—Å—Ç –¥–ª—è —Å–æ–±—ã—Ç–∏—è "${request.eventName}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω`);
      return Result.ok(post);
    } catch (error) {
      logger.exception('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ –∏–∑ —Å–æ–±—ã—Ç–∏—è', error);
      return Result.fail('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ –∏–∑ —Å–æ–±—ã—Ç–∏—è');
    }
  }

  private generateContent(request: GeneratePostFromEventRequest): string {
    const dateStr = request.eventDate.toLocaleDateString('ru-RU', {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });

    return `üìÖ ${dateStr}\n\n${request.eventDescription}\n\nüî≠ –¢–∏–ø —Å–æ–±—ã—Ç–∏—è: ${request.eventType}\n\n#–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—è #${request.eventType.toLowerCase()}`;
  }
}
