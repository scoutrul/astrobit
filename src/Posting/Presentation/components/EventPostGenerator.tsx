import React, { useState, useEffect } from 'react';
import { GeneratePostFromEventUseCase, GeneratePostFromEventRequest } from '../../Application/use-cases/GeneratePostFromEventUseCase';
import { LocalStoragePostRepository } from '../../Infrastructure/repositories/LocalStoragePostRepository';

interface AstronomicalEvent {
  id: string;
  name: string;
  type: string;
  date: string;
  description: string;
  significance?: string;
}

interface EventPostGeneratorProps {
  onPostGenerated: () => void;
}

export const EventPostGenerator: React.FC<EventPostGeneratorProps> = ({ onPostGenerated }) => {
  const [events, setEvents] = useState<AstronomicalEvent[]>([]);
  const [selectedEvent, setSelectedEvent] = useState<AstronomicalEvent | null>(null);
  const [scheduledDate, setScheduledDate] = useState('');
  const [generating, setGenerating] = useState(false);

  const repository = new LocalStoragePostRepository();
  const generateUseCase = new GeneratePostFromEventUseCase(repository);

  useEffect(() => {
    // –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π
    const mockEvents: AstronomicalEvent[] = [
      {
        id: '1',
        name: '–õ—É–Ω–Ω–æ–µ –∑–∞—Ç–º–µ–Ω–∏–µ',
        type: 'lunar_eclipse',
        date: '2024-12-31',
        description: '–ü–æ–ª–Ω–æ–µ –ª—É–Ω–Ω–æ–µ –∑–∞—Ç–º–µ–Ω–∏–µ –±—É–¥–µ—Ç –≤–∏–¥–Ω–æ –Ω–∞ –±–æ–ª—å—à–µ–π —á–∞—Å—Ç–∏ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏. –õ—É–Ω–∞ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ—Ç –∫—Ä–∞—Å–Ω–æ–≤–∞—Ç—ã–π –æ—Ç—Ç–µ–Ω–æ–∫.',
        significance: '–í—ã—Å–æ–∫–∞—è'
      },
      {
        id: '2',
        name: '–ö–≤–∞–¥—Ä–∞–Ω—Ç–∏–¥—ã',
        type: 'meteor_shower',
        date: '2024-12-28',
        description: '–ü–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –º–µ—Ç–µ–æ—Ä–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –ö–≤–∞–¥—Ä–∞–Ω—Ç–∏–¥—ã. –û–∂–∏–¥–∞–µ—Ç—Å—è –¥–æ 40 –º–µ—Ç–µ–æ—Ä–æ–≤ –≤ —á–∞—Å.',
        significance: '–°—Ä–µ–¥–Ω—è—è'
      },
      {
        id: '3',
        name: '–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –í–µ–Ω–µ—Ä—ã –∏ –ú–∞—Ä—Å–∞',
        type: 'planetary_conjunction',
        date: '2025-01-15',
        description: '–í–µ–Ω–µ—Ä–∞ –∏ –ú–∞—Ä—Å —Å–±–ª–∏–∑—è—Ç—Å—è –Ω–∞ –Ω–µ–±–µ –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ.',
        significance: '–°—Ä–µ–¥–Ω—è—è'
      }
    ];
    setEvents(mockEvents);
  }, []);

  const handleGeneratePost = async () => {
    if (!selectedEvent) return;

    setGenerating(true);
    try {
      const request: GeneratePostFromEventRequest = {
        eventName: selectedEvent.name,
        eventDescription: selectedEvent.description,
        eventDate: new Date(selectedEvent.date),
        eventType: selectedEvent.type
      };

      const result = await generateUseCase.execute(request);
      
      if (result.isSuccess) {
        onPostGenerated();
        setSelectedEvent(null);
        setScheduledDate('');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞:', error);
    } finally {
      setGenerating(false);
    }
  };

  return (
    <div className="bg-gradient-to-r from-purple-50 to-blue-50 rounded-lg p-6 border border-purple-200">
      <div className="flex items-center gap-2 mb-4">
        <span className="text-2xl">üåü</span>
        <h3 className="text-lg font-semibold text-gray-900">–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤ –∏–∑ —Å–æ–±—ã—Ç–∏–π</h3>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            –ê—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–µ —Å–æ–±—ã—Ç–∏–µ
          </label>
          <select
            value={selectedEvent?.id || ''}
            onChange={(e) => {
              const event = events.find(ev => ev.id === e.target.value);
              setSelectedEvent(event || null);
            }}
            className="w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-purple-500 focus:border-transparent"
          >
            <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ</option>
            {events.map(event => (
              <option key={event.id} value={event.id}>
                {event.name} - {new Date(event.date).toLocaleDateString('ru-RU')}
              </option>
            ))}
          </select>
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            –î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
          </label>
          <input
            type="datetime-local"
            value={scheduledDate}
            onChange={(e) => setScheduledDate(e.target.value)}
            className="w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-purple-500 focus:border-transparent"
          />
        </div>
      </div>

      {selectedEvent && (
        <div className="bg-white rounded-lg p-4 mb-4 border border-gray-200">
          <h4 className="font-medium text-gray-900 mb-2">{selectedEvent.name}</h4>
          <p className="text-gray-600 text-sm mb-2">{selectedEvent.description}</p>
          <div className="flex gap-4 text-xs text-gray-500">
            <span>üìÖ {new Date(selectedEvent.date).toLocaleDateString('ru-RU')}</span>
            <span>‚≠ê {selectedEvent.significance}</span>
            <span>üè∑Ô∏è {selectedEvent.type}</span>
          </div>
        </div>
      )}

      <button
        onClick={handleGeneratePost}
        disabled={!selectedEvent || generating}
        className={`w-full py-2 px-4 rounded-lg font-medium ${
          selectedEvent && !generating
            ? 'bg-purple-600 text-white hover:bg-purple-700'
            : 'bg-gray-300 text-gray-500 cursor-not-allowed'
        }`}
      >
        {generating ? '‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è...' : '‚ú® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç'}
      </button>
    </div>
  );
};
