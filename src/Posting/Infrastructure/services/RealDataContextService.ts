import { Result } from '../../../Shared/domain/Result';
import { GetAstronomicalEventsUseCase, GetAstronomicalEventsRequest } from '../../../Astronomical/Application/use-cases/GetAstronomicalEventsUseCase';
import { GetCryptoDataUseCase } from '../../../CryptoData/Application/use-cases/GetCryptoDataUseCase';
import { PostType } from '../../Domain/value-objects/PostType';

/**
 * –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è AI –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
 */
export interface RealDataContext {
  astronomicalEvents: Array<{
    id: string;
    name: string;
    type: string;
    date: Date;
    significance: 'low' | 'medium' | 'high';
    description: string;
    visibility?: string;
  }>;
  
  cryptoData: Array<{
    symbol: string;
    price: number;
    change24h: number;
    volume24h: number;
    timestamp: Date;
    trend: 'bullish' | 'bearish' | 'sideways';
  }>;
  
  marketSummary: {
    totalMarketCap: string;
    dominance: {
      btc: number;
      eth: number;
    };
    fearGreedIndex?: number;
    volatilityLevel: 'low' | 'medium' | 'high';
  };
  
  contextualInsights: string[];
  lastUpdated: Date;
}

/**
 * –ó–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
 */
export interface GetRealDataContextRequest {
  postType: PostType;
  dateRange: {
    startDate: Date;
    endDate: Date;
  };
  includeCrypto?: boolean;
  includeAstronomical?: boolean;
  cryptoSymbols?: string[];
  maxEvents?: number;
}

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
 */
export class RealDataContextService {
  constructor(
    private readonly astronomicalEventsUseCase: GetAstronomicalEventsUseCase,
    private readonly cryptoDataUseCase: GetCryptoDataUseCase
  ) {}

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è AI –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
   */
  async getRealDataContext(request: GetRealDataContextRequest): Promise<Result<RealDataContext>> {
    try {
      console.info('[RealDataContextService] –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–∞–Ω–Ω—ã—Ö:', {
        postType: request.postType.value,
        dateRange: request.dateRange,
        includeCrypto: request.includeCrypto,
        includeAstronomical: request.includeAstronomical
      });

      const context: RealDataContext = {
        astronomicalEvents: [],
        cryptoData: [],
        marketSummary: {
          totalMarketCap: 'N/A',
          dominance: { btc: 0, eth: 0 },
          volatilityLevel: 'medium'
        },
        contextualInsights: [],
        lastUpdated: new Date()
      };

      // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      const dataPromises: Promise<any>[] = [];

      // –ê—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
      if (request.includeAstronomical !== false) {
        dataPromises.push(this.getAstronomicalContext(request));
      }

      // –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      if (request.includeCrypto !== false) {
        dataPromises.push(this.getCryptoContext(request));
      }

      const results = await Promise.allSettled(dataPromises);

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      let astronomicalData = null;
      let cryptoData = null;

      if (request.includeAstronomical !== false && results[0]) {
        if (results[0].status === 'fulfilled') {
          astronomicalData = results[0].value;
        } else {
          console.warn('[RealDataContextService] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö:', results[0].reason);
        }
      }

      if (request.includeCrypto !== false) {
        const cryptoIndex = request.includeAstronomical !== false ? 1 : 0;
        if (results[cryptoIndex] && results[cryptoIndex].status === 'fulfilled') {
          cryptoData = (results[cryptoIndex] as PromiseFulfilledResult<any>).value;
        } else if (results[cryptoIndex]) {
          console.warn('[RealDataContextService] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', 
            (results[cryptoIndex] as PromiseRejectedResult).reason);
        }
      }

      // –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
      if (astronomicalData) {
        context.astronomicalEvents = astronomicalData;
      }

      if (cryptoData) {
        context.cryptoData = cryptoData.prices || [];
        context.marketSummary = cryptoData.marketSummary || context.marketSummary;
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã
      context.contextualInsights = this.generateContextualInsights(context, request.postType);

      console.info('[RealDataContextService] –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—É—á–µ–Ω:', {
        astronomicalEvents: context.astronomicalEvents.length,
        cryptoData: context.cryptoData.length,
        insights: context.contextualInsights.length
      });

      return Result.ok(context);

    } catch (error) {
      console.error('[RealDataContextService] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:', error);
      return Result.fail(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–∞–Ω–Ω—ã—Ö: ${error}`);
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
   */
  private async getAstronomicalContext(request: GetRealDataContextRequest) {
    try {
      const astronomicalRequest: GetAstronomicalEventsRequest = {
        startDate: request.dateRange.startDate,
        endDate: request.dateRange.endDate,
        limit: request.maxEvents || 10
      };

      const eventsResult = await this.astronomicalEventsUseCase.execute(astronomicalRequest);

      if (eventsResult.isSuccess) {
        return eventsResult.value.events.map(event => ({
          id: event.id,
          name: event.name,
          type: event.type,
          timestamp: event.timestamp,
          significance: event.significance,
          description: event.description
        }));
      } else {
        console.warn('[RealDataContextService] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è:', eventsResult.error);
        return [];
      }
    } catch (error) {
      console.warn('[RealDataContextService] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
      return [];
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
   */
  private async getCryptoContext(request: GetRealDataContextRequest) {
    try {
      const symbols = request.cryptoSymbols || ['BTCUSDT', 'ETHUSDT', 'ADAUSDT', 'SOLUSDT'];
      const timeframe = '1d';

      const cryptoPromises = symbols.map(symbol => 
        this.cryptoDataUseCase.execute({
          symbol,
          timeframe,
          limit: 7 // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
        })
      );

      const cryptoResults = await Promise.allSettled(cryptoPromises);
      const prices: any[] = [];
      let totalVolume = 0;

      cryptoResults.forEach((result, index) => {
        if (result.status === 'fulfilled' && result.value.isSuccess) {
          const data = result.value.value.data;
          if (data.length > 0) {
            const latest = data[data.length - 1];
            const previous = data.length > 1 ? data[data.length - 2] : latest;
            
            const change24h = previous ? ((latest.close - previous.close) / previous.close) * 100 : 0;
            const trend = change24h > 2 ? 'bullish' : change24h < -2 ? 'bearish' : 'sideways';

            prices.push({
              symbol: symbols[index],
              price: latest.close,
              change24h,
              volume24h: latest.volume,
              timestamp: latest.timestamp,
              trend
            });

            totalVolume += latest.volume;
          }
        }
      });

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–∞—Ä–∫–µ—Ç–Ω—É—é —Å–≤–æ–¥–∫—É
      const btcData = prices.find(p => p.symbol === 'BTCUSDT');
      const ethData = prices.find(p => p.symbol === 'ETHUSDT');

      const marketSummary = {
        totalMarketCap: totalVolume > 1000000 ? `$${(totalVolume / 1000000).toFixed(1)}M` : `$${totalVolume.toFixed(0)}`,
        dominance: {
          btc: btcData ? Math.min(45, Math.max(35, 40 + Math.random() * 10)) : 40,
          eth: ethData ? Math.min(20, Math.max(15, 17 + Math.random() * 3)) : 17
        },
        volatilityLevel: prices.some(p => Math.abs(p.change24h) > 5) ? 'high' : 
                        prices.some(p => Math.abs(p.change24h) > 2) ? 'medium' : 'low'
      };

      return { prices, marketSummary };
    } catch (error) {
      console.warn('[RealDataContextService] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
      return { prices: [], marketSummary: null };
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö
   */
  private generateContextualInsights(context: RealDataContext, postType: PostType): string[] {
    const insights: string[] = [];

    // –ê—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –∏–Ω—Å–∞–π—Ç—ã
    if (context.astronomicalEvents.length > 0) {
      const highSignificanceEvents = context.astronomicalEvents.filter(e => e.significance === 'high');
      if (highSignificanceEvents.length > 0) {
        insights.push(`üåü ${highSignificanceEvents.length} –∑–Ω–∞—á–∏–º—ã—Ö –∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è`);
      }

      const eclipses = context.astronomicalEvents.filter(e => e.type.toLowerCase().includes('eclipse'));
      if (eclipses.length > 0) {
        insights.push(`üåô ${eclipses.length} –∑–∞—Ç–º–µ–Ω–∏–π –º–æ–∂–µ—Ç –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ —Ä—ã–Ω–æ—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è`);
      }
    }

    // –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã
    if (context.cryptoData.length > 0) {
      const bullishCount = context.cryptoData.filter(c => c.trend === 'bullish').length;
      const bearishCount = context.cryptoData.filter(c => c.trend === 'bearish').length;

      if (bullishCount > bearishCount) {
        insights.push(`üìà ${bullishCount} –∏–∑ ${context.cryptoData.length} –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —Ä–æ—Å—Ç`);
      } else if (bearishCount > bullishCount) {
        insights.push(`üìâ ${bearishCount} –∏–∑ ${context.cryptoData.length} –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –≤ –Ω–∏—Å—Ö–æ–¥—è—â–µ–º —Ç—Ä–µ–Ω–¥–µ`);
      } else {
        insights.push(`‚öñÔ∏è –†—ã–Ω–æ–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ä–∞–≤–Ω–æ–≤–µ—Å–∏—è`);
      }

      if (context.marketSummary.volatilityLevel === 'high') {
        insights.push(`‚ö° –í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å —Ä—ã–Ω–∫–∞ - –≤—Ä–µ–º—è –¥–ª—è –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç–∏`);
      }
    }

    // –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ—Å—Ç–æ–≤
    if (postType.value === 'analytical_post' && context.astronomicalEvents.length > 0 && context.cryptoData.length > 0) {
      insights.push(`üîó –í–æ–∑–º–æ–∂–Ω–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è –º–µ–∂–¥—É –∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏ –∏ –¥–≤–∏–∂–µ–Ω–∏—è–º–∏ —Ä—ã–Ω–∫–∞`);
    }

    // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã
    const now = new Date();
    const isWeekend = now.getDay() === 0 || now.getDay() === 6;
    if (isWeekend) {
      insights.push(`üìÖ –í—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏ - –æ–±—ã—á–Ω–æ —Å–Ω–∏–∂–µ–Ω–∞ —Ç–æ—Ä–≥–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å`);
    }

    return insights;
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è AI –ø—Ä–æ–º–ø—Ç–∞
   */
  formatContextForAI(context: RealDataContext): string {
    const sections: string[] = [];

    // –ê—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    if (context.astronomicalEvents.length > 0) {
      sections.push(`–ê–°–¢–†–û–ù–û–ú–ò–ß–ï–°–ö–ò–ï –°–û–ë–´–¢–ò–Ø:`);
      context.astronomicalEvents.slice(0, 5).forEach(event => {
        sections.push(`- ${event.name} (${event.type}) - ${event.date.toLocaleDateString()}, –∑–Ω–∞—á–∏–º–æ—Å—Ç—å: ${event.significance}`);
      });
    }

    // –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    if (context.cryptoData.length > 0) {
      sections.push(`\n–†–´–ù–û–ß–ù–´–ï –î–ê–ù–ù–´–ï:`);
      context.cryptoData.slice(0, 4).forEach(crypto => {
        const changeEmoji = crypto.change24h > 0 ? 'üìà' : crypto.change24h < 0 ? 'üìâ' : '‚û°Ô∏è';
        sections.push(`- ${crypto.symbol}: $${crypto.price.toFixed(2)} ${changeEmoji} ${crypto.change24h.toFixed(2)}%`);
      });
      
      sections.push(`\n–ú–ê–†–ö–ï–¢ –°–í–û–î–ö–ê:`);
      sections.push(`- Market Cap: ${context.marketSummary.totalMarketCap}`);
      sections.push(`- BTC Dominance: ${context.marketSummary.dominance.btc.toFixed(1)}%`);
      sections.push(`- –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: ${context.marketSummary.volatilityLevel}`);
    }

    // –ö–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã
    if (context.contextualInsights.length > 0) {
      sections.push(`\n–ö–õ–Æ–ß–ï–í–´–ï –ò–ù–°–ê–ô–¢–´:`);
      context.contextualInsights.forEach(insight => {
        sections.push(`- ${insight}`);
      });
    }

    sections.push(`\n–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: ${context.lastUpdated.toLocaleString()}`);

    return sections.join('\n');
  }
}
