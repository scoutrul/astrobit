import { 
  IAIService, 
  GenerationOptions, 
  AIGenerationResult, 
  ValidationResult 
} from './IAIService';

export class AnthropicAIService implements IAIService {
  private readonly baseUrl = 'https://api.anthropic.com/v1/messages';
  private readonly apiKey: string;
  private readonly defaultModel: string;
  private usageStats = {
    requestsToday: 0,
    tokensUsed: 0,
    remainingQuota: 10000 // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
  };

  constructor() {
    const apiKey = import.meta.env.VITE_ANTHROPIC_API_KEY;
    const model = import.meta.env.VITE_CHAT_MODEL || 'claude-3-5-haiku-latest';
    
    if (!apiKey) {
      throw new Error('Anthropic API key not configured. Please set VITE_ANTHROPIC_API_KEY environment variable.');
    }
    
    this.apiKey = apiKey;
    this.defaultModel = model;
    
    console.info('[AnthropicAIService] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –º–æ–¥–µ–ª—å—é:', this.defaultModel);
  }

  async generate(prompt: string, options: GenerationOptions = {}): Promise<AIGenerationResult> {
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), options.timeout || 30000);

    try {
      const response = await fetch(this.baseUrl, {
        method: 'POST',
        headers: {
          'x-api-key': this.apiKey,
          'Content-Type': 'application/json',
          'anthropic-version': '2023-06-01',
          'anthropic-dangerous-direct-browser-access': 'true'
        },
        body: JSON.stringify({
          model: options.model || this.defaultModel,
          max_tokens: options.maxTokens || 1000,
          temperature: options.temperature || 0.7,
          messages: [
            {
              role: 'user',
              content: `${options.systemPrompt || this.getDefaultSystemPrompt()}\n\n${prompt}`
            }
          ]
        }),
        signal: controller.signal
      });

      clearTimeout(timeoutId);

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`Anthropic API request failed: ${response.status} ${response.statusText}. ${errorText}`);
      }

      const data = await response.json();

      if (!data.content || !data.content[0] || !data.content[0].text) {
        throw new Error('Invalid response format from Anthropic API');
      }

      const content = data.content[0].text;
      const tokens = data.usage?.input_tokens + data.usage?.output_tokens || 0;

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
      this.usageStats.requestsToday++;
      this.usageStats.tokensUsed += tokens;

      const result: AIGenerationResult = {
        content,
        metadata: {
          model: options.model || this.defaultModel,
          tokens,
          confidence: this.calculateConfidence(content),
          timestamp: new Date()
        },
        validation: this.validateContent(content)
      };

      console.info('[AnthropicAIService] –ö–æ–Ω—Ç–µ–Ω—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω:', {
        model: result.metadata.model,
        tokens: result.metadata.tokens,
        confidence: result.metadata.confidence
      });

      return result;

    } catch (error) {
      clearTimeout(timeoutId);
      console.error('[AnthropicAIService] –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', error);
      throw error;
    }
  }

  async isAvailable(): Promise<boolean> {
    try {
      // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
      const response = await fetch(this.baseUrl, {
        method: 'POST',
        headers: {
          'x-api-key': this.apiKey,
          'Content-Type': 'application/json',
          'anthropic-version': '2023-06-01',
          'anthropic-dangerous-direct-browser-access': 'true'
        },
        body: JSON.stringify({
          model: this.defaultModel,
          max_tokens: 10,
          messages: [{ role: 'user', content: 'test' }]
        })
      });
      
      return response.ok;
    } catch (error) {
      console.warn('[AnthropicAIService] –°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error);
      return false;
    }
  }

  async getUsageStats(): Promise<{
    requestsToday: number;
    tokensUsed: number;
    remainingQuota: number;
  }> {
    return { ...this.usageStats };
  }

  validateContent(content: string): ValidationResult {
    const warnings: string[] = [];
    const errors: string[] = [];

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    if (content.length < 50) {
      warnings.push('–ö–æ–Ω—Ç–µ–Ω—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π');
    }
    
    if (content.length > 4000) {
      warnings.push('–ö–æ–Ω—Ç–µ–Ω—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º-–ø–æ—Å—Ç–∞');
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —ç–º–æ–¥–∑–∏ (–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º)
    if (!/[üåôüìàüìäüìùüöÄ‚ö°üè∑Ô∏èüìöüéØüìèüé®#]/.test(content)) {
      warnings.push('–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è');
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ö–µ—à—Ç–µ–≥–æ–≤
    if (!/#\w+/.test(content)) {
      warnings.push('–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å —Ö–µ—à—Ç–µ–≥–∏');
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
    if (!content.trim()) {
      errors.push('–ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
    }

    return {
      isValid: errors.length === 0,
      warnings,
      errors
    };
  }

  private getDefaultSystemPrompt(): string {
    return `–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª–∞ AstroBit, –∫–æ—Ç–æ—Ä—ã–π –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –∞—Å—Ç—Ä–æ–Ω–æ–º–∏—é –∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã. 

–¢–≤–æ—è –∑–∞–¥–∞—á–∞:
- –°–æ–∑–¥–∞–≤–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π, –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è
- –î–æ–±–∞–≤–ª—è—Ç—å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ö–µ—à—Ç–µ–≥–∏
- –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∏–ª—å –ø–æ–¥ —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é
- –°–≤—è–∑—ã–≤–∞—Ç—å –∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è —Å —Ä—ã–Ω–æ—á–Ω—ã–º–∏ —Ç—Ä–µ–Ω–¥–∞–º–∏

–°—Ç–∏–ª—å:
- –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π, –Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã–π
- –° —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –Ω–∞—É—á–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏
- –° –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫—É—é –ø–æ–ª—å–∑—É
- –° –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
- –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å —ç–º–æ–¥–∑–∏
- –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç —Å —Ä–∞–∑–±–∏–≤–∫–æ–π –Ω–∞ –∞–±–∑–∞—Ü—ã
- –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
- –•–µ—à—Ç–µ–≥–∏ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ (–∫–∞–∂–¥—ã–π —Ö–µ—à—Ç–µ–≥ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª)
- –î–ª–∏–Ω–∞: 200-1200 —Å–∏–º–≤–æ–ª–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–∞–ø—Ä–æ—Å–∞

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: 
1. –ü–æ—Å–ª–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
2. –ó–∞—Ç–µ–º –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ö–µ—à—Ç–µ–≥–∏
3. –§–æ—Ä–º–∞—Ç: –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ + —Ö–µ—à—Ç–µ–≥–∏ –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ

–ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞:
üå† –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ—Å—Ç–∞

–û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –∑–¥–µ—Å—å...

#–ê—Å—Ç—Ä–æ–Ω–æ–º–∏—è #–ö–æ—Å–º–æ—Å #–ù–∞—É–∫–∞`;
  }

  private calculateConfidence(content: string): number {
    // –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
    let confidence = 0.5; // –ë–∞–∑–æ–≤–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å

    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    if (content.length > 100 && content.length < 2000) confidence += 0.2;
    if (/[üåôüìàüìäüìùüöÄ‚ö°üè∑Ô∏èüìöüéØüìèüé®]/.test(content)) confidence += 0.1;
    if (/#\w+/.test(content)) confidence += 0.1;
    if (content.includes('–∞—Å—Ç—Ä–æ–Ω–æ–º–∏') || content.includes('–∫—Ä–∏–ø—Ç–æ')) confidence += 0.1;

    return Math.min(confidence, 1.0);
  }
}
