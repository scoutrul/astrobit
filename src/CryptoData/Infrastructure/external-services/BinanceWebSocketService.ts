import { ExternalService } from '../../../Shared/infrastructure/ExternalService';
import { Result } from '../../../Shared/domain/Result';

export interface BinanceKlineWebSocketData {
  symbol: string;
  interval: string;
  timestamp: number;
  open: number;
  high: number;
  low: number;
  close: number;
  volume: number;
  isClosed: boolean;
}

export interface BinanceWebSocketMessage {
  stream: string;
  data: {
    e: string; // Event type
    E: number; // Event time
    s: string; // Symbol
    k: {
      t: number; // Kline start time
      T: number; // Kline close time
      s: string; // Symbol
      i: string; // Interval
      f: number; // First trade ID
      L: number; // Last trade ID
      o: string; // Open price
      h: string; // High price
      l: string; // Low price
      c: string; // Close price
      v: string; // Volume
      n: number; // Number of trades
      x: boolean; // Is this kline closed?
      q: string; // Quote asset volume
      V: string; // Taker buy base asset volume
      Q: string; // Taker buy quote asset volume
    };
  };
}

export class BinanceWebSocketService extends ExternalService {
  private static instance: BinanceWebSocketService | null = null;
  private ws: WebSocket | null = null;
  private isConnected = false;
  private reconnectAttempts = 0;
  private maxReconnectAttempts = 5;
  private reconnectDelay = 1000;
  private currentSubscription: { symbol: string; interval: string } | null = null;
  private messageHandlers: ((data: BinanceKlineWebSocketData) => void)[] = [];

  private constructor() {
    super();
  }

  static getInstance(): BinanceWebSocketService {
    if (!BinanceWebSocketService.instance) {
      BinanceWebSocketService.instance = new BinanceWebSocketService();
    }
    return BinanceWebSocketService.instance;
  }

  /**
   * –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ kline –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
   */
    async subscribeToKlineData(
    symbol: string,
    interval: string,
    onData: (data: BinanceKlineWebSocketData) => void
  ): Promise<Result<void>> {
    try {
      // –î–ª—è –Ω–µ–¥–µ–ª—å–Ω—ã—Ö –∏ –º–µ—Å—è—á–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ WebSocket –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–æ–≥—É—Ç –±—ã—Ç—å –º–µ–Ω–µ–µ —á–∞—Å—Ç—ã–º–∏
      // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      console.log(`[WebSocket] üîÑ Attempting to subscribe to ${symbol.toUpperCase()}@kline_${interval}`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—ã—Ç–∞–µ–º—Å—è –ª–∏ –º—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç—É –∂–µ –ø–æ–¥–ø–∏—Å–∫—É
      if (this.currentSubscription && 
          this.currentSubscription.symbol === symbol.toLowerCase() && 
          this.currentSubscription.interval === interval &&
          this.isConnected) {
        console.log(`[WebSocket] ‚ÑπÔ∏è Already subscribed to ${symbol.toUpperCase()}@kline_${interval}, skipping`);
        return Result.ok();
      }

      // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      // –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ —Å—Ç–∞—Ä—ã–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–µ–∫—Ä–∞—Ç—è—Ç —Ä–∞–±–æ—Ç—É
      await this.forceCloseAllConnections();
      
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      await new Promise(resolve => setTimeout(resolve, 150));

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
      this.messageHandlers = [onData];

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É
      this.currentSubscription = { symbol: symbol.toLowerCase(), interval };
      
      // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket
      await this.connect();

      console.log(`[WebSocket] ‚úÖ Successfully subscribed to ${symbol.toUpperCase()}@kline_${interval}`);
      return Result.ok();
    } catch (error) {
      console.error(`[WebSocket] ‚ùå Failed to subscribe to ${symbol.toUpperCase()}@kline_${interval}:`, error);
      return Result.fail(`Failed to subscribe: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }

  /**
   * –û—Ç–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –æ—Ç —Ç–µ–∫—É—â–µ–π –ø–æ–¥–ø–∏—Å–∫–∏
   */
  async unsubscribe(): Promise<Result<void>> {
    try {
      console.log(`[WebSocket] üîå Unsubscribing from:`, {
        currentSubscription: this.currentSubscription,
        wsState: this.ws?.readyState,
        isConnected: this.isConnected
      });

      // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
      // –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç —Å—Ç–∞—Ä—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
      this.messageHandlers = [];
      
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
      if (this.ws) {
        try {
          // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º
          this.ws.onopen = null;
          this.ws.onmessage = null;
          this.ws.onerror = null;
          this.ws.onclose = null;
          
          // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
          if (this.ws.readyState === WebSocket.OPEN || this.ws.readyState === WebSocket.CONNECTING) {
            this.ws.close(1000, 'Unsubscribing'); // –ö–æ–¥ 1000 = –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ
          }
          
          // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ñ–¥–µ–º –ø–æ–ª–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
          // –∏–ª–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω—É–ª—è–µ–º WebSocket —á–µ—Ä–µ–∑ —Ç–∞–π–º–∞—É—Ç
          let attempts = 0;
          const maxAttempts = 10; // –ú–∞–∫—Å–∏–º—É–º 500–º—Å
          
          while (this.ws && this.ws.readyState !== WebSocket.CLOSED && attempts < maxAttempts) {
            await new Promise(resolve => setTimeout(resolve, 50));
            attempts++;
          }
          
          // –ï—Å–ª–∏ WebSocket –≤—Å–µ –µ—â–µ –Ω–µ –∑–∞–∫—Ä—ã–ª—Å—è, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω—É–ª—è–µ–º
          if (this.ws && this.ws.readyState !== WebSocket.CLOSED) {
            console.warn(`[WebSocket] ‚ö†Ô∏è WebSocket not closed after ${attempts * 50}ms, forcing cleanup`);
            this.ws = null;
          }
          
        } catch (closeError) {
          console.warn('[WebSocket] ‚ö†Ô∏è Error during WebSocket close:', closeError);
        } finally {
          this.ws = null;
        }
      }

      // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      this.isConnected = false;
      this.currentSubscription = null;
      
      console.log(`[WebSocket] ‚úÖ Successfully unsubscribed`);
      return Result.ok();
    } catch (error) {
      console.warn('[WebSocket] ‚ö†Ô∏è Error during unsubscribe (continuing anyway):', error);
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      this.ws = null;
      this.isConnected = false;
      this.currentSubscription = null;
      this.messageHandlers = [];
      
      return Result.ok();
    }
  }

  /**
   * –ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ Binance WebSocket API
   */
  private async connect(): Promise<void> {
    if (!this.currentSubscription) {
      throw new Error('No subscription configured');
    }

    const { symbol, interval } = this.currentSubscription;
    const streamName = `${symbol}@kline_${interval}`;
    const wsUrl = `wss://stream.binance.com:9443/ws/${streamName}`;

    return new Promise((resolve, reject) => {
      try {
        this.ws = new WebSocket(wsUrl);

        this.ws.onopen = () => {
          this.isConnected = true;
          this.reconnectAttempts = 0;
          resolve();
        };

        this.ws.onmessage = (event) => {
          try {
            const message = JSON.parse(event.data);
            this.handleMessage(message);
          } catch (error) {
            console.error('[WebSocket] ‚ùå Message parsing error:', error);
          }
        };

        this.ws.onerror = (error) => {
          console.warn(`[WebSocket] ‚ö†Ô∏è WebSocket error for ${symbol}@${interval}:`, {
            error: error,
            readyState: this.ws?.readyState,
            url: this.ws?.url
          });
          
          // –ù–µ –æ—Ç–∫–ª–æ–Ω—è–µ–º –ø—Ä–æ–º–∏—Å –ø—Ä–∏ –æ—à–∏–±–∫–µ - WebSocket –º–æ–∂–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è
          // reject(error);
        };

        this.ws.onclose = () => {
          this.isConnected = false;
          this.handleReconnection();
        };

      } catch (error) {
        console.error('[BinanceWebSocketService] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è WebSocket:', error);
        reject(error);
      }
    });
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  private handleMessage(message: any): void {
    // –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
    if (!this.currentSubscription || !this.isConnected) {
      console.log(`[WebSocket] ‚ö†Ô∏è Ignoring message - no active subscription or not connected:`, {
        hasSubscription: !!this.currentSubscription,
        isConnected: this.isConnected,
        messageType: message?.e || 'unknown'
      });
      return;
    }

    // –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ó–ê–©–ò–¢–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ WebSocket –≤—Å–µ –µ—â–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—É—â–µ–π –ø–æ–¥–ø–∏—Å–∫–µ
    if (this.ws && this.currentSubscription) {
      const expectedStream = `${this.currentSubscription.symbol}@kline_${this.currentSubscription.interval}`;
      const currentUrl = this.ws.url;
      
      if (currentUrl && !currentUrl.includes(expectedStream)) {
        console.warn(`[WebSocket] ‚ö†Ô∏è Ignoring message - WebSocket URL mismatch:`, {
          expected: expectedStream,
          current: currentUrl,
          messageType: message?.e || 'unknown'
        });
        return;
      }
    }

    // –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ó–ê–©–ò–¢–ê: –ï—Å–ª–∏ WebSocket –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—É—â–µ–π –ø–æ–¥–ø–∏—Å–∫–µ, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º
    if (this.ws && this.currentSubscription && this.ws.url) {
      const expectedStream = `${this.currentSubscription.symbol}@kline_${this.currentSubscription.interval}`;
      const currentUrl = this.ws.url;
      
      if (!currentUrl.includes(expectedStream)) {
        console.warn(`[WebSocket] üö® WebSocket URL mismatch detected, forcing cleanup:`, {
          expected: expectedStream,
          current: currentUrl
        });
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        this.forceCloseAllConnections();
        return;
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–æ–æ–±—â–µ–Ω–∏—è
    if (!message || typeof message !== 'object') {
      return;
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å stream (–¥–ª—è –ø–æ–¥–ø–∏—Å–æ–∫)
    if (message.stream && message.data) {
      this.handleStreamMessage(message);
      return;
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä—è–º—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–ª—è –æ–¥–∏–Ω–æ—á–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫)
    if (message.e === 'kline') {
      this.handleKlineMessage(message);
      return;
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å stream
   */
  private handleStreamMessage(message: any): void {
    if (message.data.e !== 'kline') {
      return;
    }

    this.handleKlineData(message.data.k);
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä—è–º—ã–µ kline —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  private handleKlineMessage(message: any): void {
    if (message.k) {
      this.handleKlineData(message.k);
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç kline –¥–∞–Ω–Ω—ã–µ
   */
  private handleKlineData(klineData: any): void {
    // –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
    if (!this.currentSubscription || !this.isConnected) {
      console.log(`[WebSocket] ‚ö†Ô∏è Ignoring kline data - no active subscription:`, {
        hasSubscription: !!this.currentSubscription,
        isConnected: this.isConnected,
        symbol: klineData?.s,
        interval: klineData?.i
      });
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É kline –¥–∞–Ω–Ω—ã—Ö
    if (!klineData || typeof klineData !== 'object') {
      return;
    }

    // –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ê–ï–ú –ü–†–û–í–ï–†–ö–£ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log(`[WebSocket] üîç DEBUG: Received kline data:`, {
      symbol: klineData.s,
      interval: klineData.i,
      expectedSymbol: this.currentSubscription.symbol,
      expectedInterval: this.currentSubscription.interval,
      price: klineData.c,
      volume: klineData.v,
      timestamp: klineData.t
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–µ–∫—É—â–µ–π –ø–æ–¥–ø–∏—Å–∫–µ —Å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π
    const normalizedReceivedSymbol = klineData.s?.toLowerCase();
    const normalizedExpectedSymbol = this.currentSubscription.symbol?.toLowerCase();
    const normalizedReceivedInterval = klineData.i?.toLowerCase();
    const normalizedExpectedInterval = this.currentSubscription.interval?.toLowerCase();
    
    if (normalizedReceivedSymbol !== normalizedExpectedSymbol || 
        normalizedReceivedInterval !== normalizedExpectedInterval) {
      console.log(`[WebSocket] ‚ö†Ô∏è Ignoring kline data - symbol/interval mismatch:`, {
        expected: `${this.currentSubscription.symbol}@${this.currentSubscription.interval}`,
        received: `${klineData.s}@${klineData.i}`,
        normalizedExpected: `${normalizedExpectedSymbol}@${normalizedExpectedInterval}`,
        normalizedReceived: `${normalizedReceivedSymbol}@${normalizedReceivedInterval}`
      });
      return; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–µ –¥–ª—è —Ç–µ–∫—É—â–µ–π –ø–æ–¥–ø–∏—Å–∫–∏
    }

    // –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ê–ï–ú –ü–†–û–í–ï–†–ö–£ –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–≤–µ—á–µ–π –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ live –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    if (!klineData.x) {
      console.log(`[WebSocket] ‚ÑπÔ∏è Skipping open candle:`, {
        symbol: klineData.s,
        interval: klineData.i,
        isClosed: klineData.x
      });
      // return; // –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ê–ï–ú –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    }

    try {
      const data: BinanceKlineWebSocketData = {
        symbol: klineData.s,
        interval: klineData.i,
        timestamp: klineData.t,
        open: parseFloat(klineData.o),
        high: parseFloat(klineData.h),
        low: parseFloat(klineData.l),
        close: parseFloat(klineData.c),
        volume: parseFloat(klineData.v),
        isClosed: klineData.x
      };

      // –í—ã–∑—ã–≤–∞–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
      this.messageHandlers.forEach(handler => {
        try {
          handler(data);
        } catch (error) {
          console.error('[WebSocket] ‚ùå Handler error:', error);
        }
      });
    } catch (error) {
      console.error('[BinanceWebSocketService] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ kline –¥–∞–Ω–Ω—ã—Ö:', error);
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ä–∞–∑—Ä—ã–≤–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
   */
  private handleReconnection(): void {
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
    if (this.isConnected) {
      this.reconnectAttempts = 0;
      return;
    }

    if (this.reconnectAttempts >= this.maxReconnectAttempts) {
      console.warn(`[WebSocket] ‚ö†Ô∏è Max reconnection attempts reached for ${this.currentSubscription?.symbol}@${this.currentSubscription?.interval}`);
      return;
    }

    this.reconnectAttempts++;
    const delay = Math.min(this.reconnectDelay * Math.pow(2, this.reconnectAttempts - 1), 30000); // –ú–∞–∫—Å–∏–º—É–º 30 —Å–µ–∫—É–Ω–¥

    console.log(`[WebSocket] üîÑ Attempting reconnection ${this.reconnectAttempts}/${this.maxReconnectAttempts} for ${this.currentSubscription?.symbol}@${this.currentSubscription?.interval} in ${delay}ms`);

    setTimeout(async () => {
      if (this.currentSubscription && !this.isConnected) {
        try {
          await this.connect();
        } catch (error) {
          console.warn(`[WebSocket] ‚ö†Ô∏è Reconnection failed, will retry:`, error);
          this.handleReconnection();
        }
      }
    }, delay);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
   */
  async isAvailable(): Promise<boolean> {
    return this.isConnected && this.ws?.readyState === WebSocket.OPEN;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é –ø–æ–¥–ø–∏—Å–∫—É
   */
  getCurrentSubscription(): { symbol: string; interval: string } | null {
    return this.currentSubscription;
  }

  /**
   * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
   * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–∏ —Å–º–µ–Ω–µ –º–æ–Ω–µ—Ç
   */
  async forceCloseAllConnections(): Promise<void> {
    console.log('[WebSocket] üö® Force closing all connections');
    
    if (this.ws) {
      try {
        // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        this.ws.onopen = null;
        this.ws.onmessage = null;
        this.ws.onerror = null;
        this.ws.onclose = null;
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º
        if (this.ws.readyState !== WebSocket.CLOSED) {
          this.ws.close(1000, 'Force close');
        }
        
        // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ñ–¥–µ–º –ø–æ–ª–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        // –∏–ª–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω—É–ª—è–µ–º WebSocket —á–µ—Ä–µ–∑ —Ç–∞–π–º–∞—É—Ç
        let attempts = 0;
        const maxAttempts = 20; // –ú–∞–∫—Å–∏–º—É–º 1 —Å–µ–∫—É–Ω–¥–∞
        
        while (this.ws && this.ws.readyState !== WebSocket.CLOSED && attempts < maxAttempts) {
          // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
          await new Promise(resolve => setTimeout(resolve, 50));
          attempts++;
        }
        
        // –ï—Å–ª–∏ WebSocket –≤—Å–µ –µ—â–µ –Ω–µ –∑–∞–∫—Ä—ã–ª—Å—è, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω—É–ª—è–µ–º
        if (this.ws && this.ws.readyState !== WebSocket.CLOSED) {
          console.warn(`[WebSocket] ‚ö†Ô∏è WebSocket not closed after ${attempts * 50}ms, forcing cleanup`);
          this.ws = null;
        }
        
      } catch (error) {
        console.warn('[WebSocket] ‚ö†Ô∏è Error during force close:', error);
      } finally {
        this.ws = null;
      }
    }
    
    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    this.isConnected = false;
    this.currentSubscription = null;
    this.messageHandlers = [];
    this.reconnectAttempts = 0;
    
    console.log('[WebSocket] ‚úÖ All connections force closed');
  }
} 