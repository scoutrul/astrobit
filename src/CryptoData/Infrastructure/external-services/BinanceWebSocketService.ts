import { ExternalService } from '../../../Shared/infrastructure/ExternalService';
import { Result } from '../../../Shared/domain/Result';

export interface BinanceKlineWebSocketData {
  symbol: string;
  interval: string;
  timestamp: number;
  open: number;
  high: number;
  low: number;
  close: number;
  volume: number;
  isClosed: boolean;
}

export interface BinanceWebSocketMessage {
  stream: string;
  data: {
    e: string; // Event type
    E: number; // Event time
    s: string; // Symbol
    k: {
      t: number; // Kline start time
      T: number; // Kline close time
      s: string; // Symbol
      i: string; // Interval
      f: number; // First trade ID
      L: number; // Last trade ID
      o: string; // Open price
      h: string; // High price
      l: string; // Low price
      c: string; // Close price
      v: string; // Volume
      n: number; // Number of trades
      x: boolean; // Is this kline closed?
      q: string; // Quote asset volume
      V: string; // Taker buy base asset volume
      Q: string; // Taker buy quote asset volume
    };
  };
}

export class BinanceWebSocketService extends ExternalService {
  private static instance: BinanceWebSocketService | null = null;
  private ws: WebSocket | null = null;
  private isConnected = false;
  private reconnectAttempts = 0;
  private maxReconnectAttempts = 5;
  private reconnectDelay = 1000;
  private currentSubscription: { symbol: string; interval: string } | null = null;
  private messageHandlers: ((data: BinanceKlineWebSocketData) => void)[] = [];

  private constructor() {
    super();
  }

  static getInstance(): BinanceWebSocketService {
    if (!BinanceWebSocketService.instance) {
      BinanceWebSocketService.instance = new BinanceWebSocketService();
    }
    return BinanceWebSocketService.instance;
  }

  /**
   * –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ kline –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
   */
  async subscribeToKlineData(
    symbol: string, 
    interval: string, 
    onData: (data: BinanceKlineWebSocketData) => void
  ): Promise<Result<void>> {
    try {
      console.log(`[BinanceWebSocketService] –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ kline –¥–∞–Ω–Ω—ã–µ: ${symbol}@${interval}`);

      // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π –ø–æ–¥–ø–∏—Å–∫–∏
      await this.unsubscribe();

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
      this.messageHandlers = [onData];

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É
      this.currentSubscription = { symbol: symbol.toLowerCase(), interval };
      
      // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket
      await this.connect();

      return Result.ok();
    } catch (error) {
      console.error('[BinanceWebSocketService] –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏:', error);
      return Result.fail(`Failed to subscribe: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }

  /**
   * –û—Ç–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –æ—Ç —Ç–µ–∫—É—â–µ–π –ø–æ–¥–ø–∏—Å–∫–∏
   */
  async unsubscribe(): Promise<Result<void>> {
    try {
      console.log('[BinanceWebSocketService] –û—Ç–ø–∏—Å–∫–∞ –æ—Ç —Ç–µ–∫—É—â–µ–π –ø–æ–¥–ø–∏—Å–∫–∏');

      // –ó–∞–∫—Ä—ã–≤–∞–µ–º WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
      if (this.ws) {
        this.ws.close();
        this.ws = null;
      }

      this.isConnected = false;
      this.currentSubscription = null;
      this.messageHandlers = [];

      return Result.ok();
    } catch (error) {
      console.error('[BinanceWebSocketService] –û—à–∏–±–∫–∞ –æ—Ç–ø–∏—Å–∫–∏:', error);
      return Result.fail(`Failed to unsubscribe: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }

  /**
   * –ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ Binance WebSocket API
   */
  private async connect(): Promise<void> {
    if (!this.currentSubscription) {
      throw new Error('No subscription configured');
    }

    const { symbol, interval } = this.currentSubscription;
    const streamName = `${symbol}@kline_${interval}`;
    const wsUrl = `wss://stream.binance.com:9443/ws/${streamName}`;

    console.log(`[BinanceWebSocketService] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫: ${wsUrl}`);

    return new Promise((resolve, reject) => {
      try {
        this.ws = new WebSocket(wsUrl);

        this.ws.onopen = () => {
          console.log('[BinanceWebSocketService] WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
          this.isConnected = true;
          this.reconnectAttempts = 0;
          resolve();
        };

        this.ws.onmessage = (event) => {
          try {
            // –£–±–∏—Ä–∞–µ–º –∏–∑–±—ã—Ç–æ—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            const message = JSON.parse(event.data);
            this.handleMessage(message);
          } catch (error) {
            console.error('[BinanceWebSocketService] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
            console.error('[BinanceWebSocketService] –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ:', event.data);
          }
        };

        this.ws.onerror = (error) => {
          console.error('[BinanceWebSocketService] WebSocket –æ—à–∏–±–∫–∞:', error);
          reject(error);
        };

        this.ws.onclose = (event) => {
          console.log('[BinanceWebSocketService] WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ:', event.code, event.reason);
          this.isConnected = false;
          this.handleReconnection();
        };

      } catch (error) {
        console.error('[BinanceWebSocketService] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è WebSocket:', error);
        reject(error);
      }
    });
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  private handleMessage(message: any): void {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–æ–æ–±—â–µ–Ω–∏—è
    if (!message || typeof message !== 'object') {
      return;
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å stream (–¥–ª—è –ø–æ–¥–ø–∏—Å–æ–∫)
    if (message.stream && message.data) {
      this.handleStreamMessage(message);
      return;
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä—è–º—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–ª—è –æ–¥–∏–Ω–æ—á–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫)
    if (message.e === 'kline') {
      this.handleKlineMessage(message);
      return;
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å stream
   */
  private handleStreamMessage(message: any): void {
    if (message.data.e !== 'kline') {
      return;
    }

    this.handleKlineData(message.data.k);
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä—è–º—ã–µ kline —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  private handleKlineMessage(message: any): void {
    if (message.k) {
      this.handleKlineData(message.k);
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç kline –¥–∞–Ω–Ω—ã–µ
   */
  private handleKlineData(klineData: any): void {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É kline –¥–∞–Ω–Ω—ã—Ö
    if (!klineData || typeof klineData !== 'object') {
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–µ–∫—É—â–µ–π –ø–æ–¥–ø–∏—Å–∫–µ
    if (this.currentSubscription) {
      if (klineData.s !== this.currentSubscription.symbol || 
          klineData.i !== this.currentSubscription.interval) {
        return; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–µ –¥–ª—è —Ç–µ–∫—É—â–µ–π –ø–æ–¥–ø–∏—Å–∫–∏
      }
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–∫—Ä—ã—Ç—ã–µ —Å–≤–µ—á–∏
    if (!klineData.x) {
      return;
    }

    try {
      const data: BinanceKlineWebSocketData = {
        symbol: klineData.s,
        interval: klineData.i,
        timestamp: klineData.t,
        open: parseFloat(klineData.o),
        high: parseFloat(klineData.h),
        low: parseFloat(klineData.l),
        close: parseFloat(klineData.c),
        volume: parseFloat(klineData.v),
        isClosed: klineData.x
      };

      // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è (–∑–∞–∫—Ä—ã—Ç—ã–µ —Å–≤–µ—á–∏)
      console.log(`[BinanceWebSocketService] üìä –ó–∞–∫—Ä—ã—Ç–∞—è —Å–≤–µ—á–∞: ${data.symbol} ${data.interval}`, {
        timestamp: new Date(data.timestamp).toISOString(),
        close: data.close,
        volume: data.volume
      });

      // –í—ã–∑—ã–≤–∞–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
      this.messageHandlers.forEach(handler => {
        try {
          handler(data);
        } catch (error) {
          console.error('[BinanceWebSocketService] –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ:', error);
        }
      });
    } catch (error) {
      console.error('[BinanceWebSocketService] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ kline –¥–∞–Ω–Ω—ã—Ö:', error);
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ä–∞–∑—Ä—ã–≤–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
   */
  private handleReconnection(): void {
    if (this.reconnectAttempts >= this.maxReconnectAttempts) {
      console.error('[BinanceWebSocketService] –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
      return;
    }

    this.reconnectAttempts++;
    const delay = this.reconnectDelay * Math.pow(2, this.reconnectAttempts - 1);

    console.log(`[BinanceWebSocketService] –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ${delay}ms (–ø–æ–ø—ã—Ç–∫–∞ ${this.reconnectAttempts})`);

    setTimeout(async () => {
      if (this.currentSubscription) {
        try {
          await this.connect();
        } catch (error) {
          console.error('[BinanceWebSocketService] –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
          this.handleReconnection();
        }
      }
    }, delay);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
   */
  async isAvailable(): Promise<boolean> {
    return this.isConnected && this.ws?.readyState === WebSocket.OPEN;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é –ø–æ–¥–ø–∏—Å–∫—É
   */
  getCurrentSubscription(): { symbol: string; interval: string } | null {
    return this.currentSubscription;
  }
} 