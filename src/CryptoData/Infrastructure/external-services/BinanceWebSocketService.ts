import { ExternalService } from '../../../Shared/infrastructure/ExternalService';
import { Result } from '../../../Shared/domain/Result';

export interface BinanceKlineWebSocketData {
  symbol: string;
  interval: string;
  timestamp: number;
  open: number;
  high: number;
  low: number;
  close: number;
  volume: number;
  isClosed: boolean;
}

export interface BinanceWebSocketMessage {
  stream: string;
  data: {
    e: string; // Event type
    E: number; // Event time
    s: string; // Symbol
    k: {
      t: number; // Kline start time
      T: number; // Kline close time
      s: string; // Symbol
      i: string; // Interval
      f: number; // First trade ID
      L: number; // Last trade ID
      o: string; // Open price
      h: string; // High price
      l: string; // Low price
      c: string; // Close price
      v: string; // Volume
      n: number; // Number of trades
      x: boolean; // Is this kline closed?
      q: string; // Quote asset volume
      V: string; // Taker buy base asset volume
      Q: string; // Taker buy quote asset volume
    };
  };
}

interface SubscriptionHandler {
  id: string;
  callback: (data: BinanceKlineWebSocketData) => void;
}

/**
 * –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π WebSocket —Å–µ—Ä–≤–∏—Å –¥–ª—è Binance API
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –µ–¥–∏–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
 */
export class BinanceWebSocketService extends ExternalService {
  private static instance: BinanceWebSocketService | null = null;
  private ws: WebSocket | null = null;
  private isConnected = false;
  private reconnectAttempts = 0;
  private maxReconnectAttempts = 5;
  private reconnectDelay = 1000;
  private reconnectTimeout: NodeJS.Timeout | null = null;
  
  // –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏: –∫–ª—é—á = "symbol@interval", –∑–Ω–∞—á–µ–Ω–∏–µ = –º–∞—Å—Å–∏–≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
  private subscriptions = new Map<string, SubscriptionHandler[]>();
  
  // –¢–µ–∫—É—â–µ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
  private activeStream: string | null = null;
  
  // –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Ç–æ–∫–∞
  private lastDataCache = new Map<string, BinanceKlineWebSocketData>();

  private constructor() {
    super();
  }

  static getInstance(): BinanceWebSocketService {
    if (!BinanceWebSocketService.instance) {
      BinanceWebSocketService.instance = new BinanceWebSocketService();
    }
    return BinanceWebSocketService.instance;
  }

  /**
   * –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ kline –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
   * –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
   */
  async subscribeToKlineData(
    symbol: string, 
    interval: string, 
    onData: (data: BinanceKlineWebSocketData) => void,
    subscriberId?: string
  ): Promise<Result<void>> {
    try {
      const normalizedSymbol = symbol.toLowerCase();
      const streamKey = `${normalizedSymbol}@kline_${interval}`;
      const handlerId = subscriberId || `handler_${Date.now()}_${Math.random()}`;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —ç—Ç–æ—Ç –ø–æ—Ç–æ–∫
      if (this.subscriptions.has(streamKey)) {
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–æ–¥–ø–∏—Å–∫–µ
        const handlers = this.subscriptions.get(streamKey)!;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å —Ç–∞–∫–∏–º ID
        const existingHandlerIndex = handlers.findIndex(h => h.id === handlerId);
        if (existingHandlerIndex >= 0) {
          // –ó–∞–º–µ–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
          handlers[existingHandlerIndex].callback = onData;
          console.log(`[WebSocket] üîÑ –û–±–Ω–æ–≤–ª–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è ${streamKey}`);
        } else {
          // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
          handlers.push({ id: handlerId, callback: onData });
          console.log(`[WebSocket] ‚ûï –î–æ–±–∞–≤–ª–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è ${streamKey} (–≤—Å–µ–≥–æ: ${handlers.length})`);
        }
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö –Ω–æ–≤–æ–º—É –ø–æ–¥–ø–∏—Å—á–∏–∫—É
        const cachedData = this.lastDataCache.get(streamKey);
        if (cachedData) {
          try {
            onData(cachedData);
          } catch (error) {
            console.error(`[WebSocket] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:`, error);
          }
        }
        
        return Result.ok();
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—ã—Ç–∞–µ–º—Å—è –ª–∏ –º—ã —Å–æ–∑–¥–∞—Ç—å –¥—É–±–ª–∏—Ä—É—é—â—É—é –ø–æ–¥–ø–∏—Å–∫—É
      if (this.activeStream === streamKey && this.subscriptions.size > 0) {
        console.log(`[WebSocket] ‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –¥—É–±–ª–∏—Ä—É—é—â—É—é –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ ${streamKey}, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º`);
        return Result.fail('Subscription already exists for this stream');
      }

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É
      this.subscriptions.set(streamKey, [{ id: handlerId, callback: onData }]);

      // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –∏–ª–∏ –Ω—É–∂–Ω–æ —Å–º–µ–Ω–∏—Ç—å –ø–æ—Ç–æ–∫
      if (!this.activeStream || this.activeStream !== streamKey) {
        await this.switchToStream(streamKey);
      }

      console.log(`[WebSocket] ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ ${streamKey}`);
      return Result.ok();
    } catch (error) {
      console.error(`[WebSocket] ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏:`, error);
      return Result.fail(`Failed to subscribe: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }

  /**
   * –û—Ç–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
   */
  async unsubscribeHandler(subscriberId: string): Promise<Result<void>> {
    try {
      let found = false;
      
      // –ò—â–µ–º –∏ —É–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ ID
      for (const [streamKey, handlers] of this.subscriptions.entries()) {
        const handlerIndex = handlers.findIndex(h => h.id === subscriberId);
        if (handlerIndex >= 0) {
          handlers.splice(handlerIndex, 1);
          found = true;
          console.log(`[WebSocket] üóëÔ∏è –£–¥–∞–ª–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ${subscriberId} –¥–ª—è ${streamKey}`);
          
          // –ï—Å–ª–∏ –±–æ–ª—å—à–µ –Ω–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Ç–æ–∫–∞, —É–¥–∞–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
          if (handlers.length === 0) {
            this.subscriptions.delete(streamKey);
            this.lastDataCache.delete(streamKey);
            console.log(`[WebSocket] üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ ${streamKey}`);
            
            // –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª –∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ—Ç–æ–∫ –∏ –±–æ–ª—å—à–µ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫, –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            if (this.activeStream === streamKey && this.subscriptions.size === 0) {
              await this.disconnect();
            }
          }
          break;
        }
      }
      
      return found ? Result.ok() : Result.fail(`Subscription not found: ${subscriberId}`);
    } catch (error) {
      return Result.fail(`Failed to unsubscribe: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }

  /**
   * –û—Ç–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –æ—Ç –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫ (legacy –º–µ—Ç–æ–¥)
   */
  async unsubscribe(): Promise<Result<void>> {
    try {
      await this.disconnect();
      this.subscriptions.clear();
      this.lastDataCache.clear();
      console.log(`[WebSocket] üóëÔ∏è –í—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ —É–¥–∞–ª–µ–Ω—ã`);
      return Result.ok();
    } catch (error) {
      return Result.fail(`Failed to unsubscribe: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }

  /**
   * –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –Ω–∞ –Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ –¥–∞–Ω–Ω—ã—Ö
   */
  private async switchToStream(streamKey: string): Promise<void> {
    // –ï—Å–ª–∏ —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ –Ω—É–∂–Ω–æ–º—É –ø–æ—Ç–æ–∫—É, –Ω–µ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è
    if (this.activeStream === streamKey && this.isConnected) {
      console.log(`[WebSocket] ‚ö° –£–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ ${streamKey}, –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è`);
      return;
    }

    console.log(`[WebSocket] üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å ${this.activeStream} –Ω–∞ ${streamKey}`);

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–æ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è
    if (this.ws && this.activeStream !== streamKey) {
      // –û—á–∏—â–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ —Å—Ç–∞—Ä–æ–≥–æ –ø–æ—Ç–æ–∫–∞
      this.subscriptions.clear();
      console.log(`[WebSocket] üßπ –û—á–∏—â–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏ —Å—Ç–∞—Ä–æ–≥–æ –ø–æ—Ç–æ–∫–∞ ${this.activeStream}`);
      
      this.ws.close();
      this.ws = null;
      this.isConnected = false;
    }

    // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–∞—É—Ç –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    if (this.reconnectTimeout) {
      clearTimeout(this.reconnectTimeout);
      this.reconnectTimeout = null;
    }

    this.activeStream = streamKey;
    await this.connect();
  }

  /**
   * –ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ Binance WebSocket API
   */
  private async connect(): Promise<void> {
    if (!this.activeStream) {
      throw new Error('No active stream configured');
    }

    const wsUrl = `wss://stream.binance.com:9443/ws/${this.activeStream}`;
    console.log(`[WebSocket] üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ${wsUrl}`);

    return new Promise((resolve, reject) => {
      try {
        this.ws = new WebSocket(wsUrl);

        this.ws.onopen = () => {
          this.isConnected = true;
          this.reconnectAttempts = 0;
          console.log(`[WebSocket] ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ ${this.activeStream}`);
          resolve();
        };

        this.ws.onmessage = (event) => {
          try {
            const message = JSON.parse(event.data);
            this.handleMessage(message);
          } catch (error) {
            console.error('[WebSocket] ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
          }
        };

        this.ws.onerror = (error) => {
          console.error('[WebSocket] ‚ùå –û—à–∏–±–∫–∞ WebSocket:', error);
          reject(error);
        };

        this.ws.onclose = (event) => {
          this.isConnected = false;
          console.log(`[WebSocket] üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ (–∫–æ–¥: ${event.code})`);
          
          // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
          if (this.subscriptions.size > 0) {
            this.handleReconnection();
          }
        };

      } catch (error) {
        console.error('[WebSocket] ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è WebSocket:', error);
        reject(error);
      }
    });
  }

  /**
   * –ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
   */
  private async disconnect(): Promise<void> {
    if (this.reconnectTimeout) {
      clearTimeout(this.reconnectTimeout);
      this.reconnectTimeout = null;
    }

    if (this.ws) {
      this.ws.close();
      this.ws = null;
    }

    this.isConnected = false;
    this.activeStream = null;
    this.reconnectAttempts = 0;
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  private handleMessage(message: any): void {
    if (!message || typeof message !== 'object') {
      return;
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å stream (–¥–ª—è –ø–æ–¥–ø–∏—Å–æ–∫)
    if (message.stream && message.data) {
      this.handleStreamMessage(message);
      return;
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä—è–º—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–ª—è –æ–¥–∏–Ω–æ—á–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫)
    if (message.e === 'kline') {
      this.handleKlineMessage(message);
      return;
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å stream
   */
  private handleStreamMessage(message: any): void {
    if (message.data.e !== 'kline') {
      return;
    }

    this.handleKlineData(message.data.k, message.stream);
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä—è–º—ã–µ kline —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  private handleKlineMessage(message: any): void {
    if (message.k) {
      const streamKey = `${message.k.s.toLowerCase()}@kline_${message.k.i}`;
      this.handleKlineData(message.k, streamKey);
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç kline –¥–∞–Ω–Ω—ã–µ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫—ç—à
   */
  private handleKlineData(klineData: any, streamKey?: string): void {
    if (!klineData || typeof klineData !== 'object') {
      return;
    }

    const inferredStreamKey = streamKey || `${klineData.s.toLowerCase()}@kline_${klineData.i}`;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ –Ω–∞ —ç—Ç–æ—Ç –ø–æ—Ç–æ–∫
    const handlers = this.subscriptions.get(inferredStreamKey);
    if (!handlers || handlers.length === 0) {
      return;
    }

    try {
      const data: BinanceKlineWebSocketData = {
        symbol: klineData.s,
        interval: klineData.i,
        timestamp: klineData.t,
        open: parseFloat(klineData.o),
        high: parseFloat(klineData.h),
        low: parseFloat(klineData.l),
        close: parseFloat(klineData.c),
        volume: parseFloat(klineData.v),
        isClosed: klineData.x
      };

      // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–≤–µ—á–µ–π)
      if (klineData.x) {
        console.log(`[WebSocket] üîç Closed candle data: t=${klineData.t}, c=${klineData.c}`);
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è –≤—Å–µ—Ö —Å–≤–µ—á–µ–π, –Ω–µ —Ç–æ–ª—å–∫–æ –∑–∞–∫—Ä—ã—Ç—ã—Ö)
      this.lastDataCache.set(inferredStreamKey, data);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º (–∫–∞–∫ –∑–∞–∫—Ä—ã—Ç—ã–µ, —Ç–∞–∫ –∏ –∂–∏–≤—ã–µ —Å–≤–µ—á–∏)
      handlers.forEach(handler => {
        try {
          handler.callback(data);
        } catch (error) {
          console.error(`[WebSocket] ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ ${handler.id}:`, error);
        }
      });

      // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–∫—Ä—ã—Ç—ã–µ —Å–≤–µ—á–∏, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å –∫–æ–Ω—Å–æ–ª—å
      if (data.isClosed) {
        console.log(`[WebSocket] üïØÔ∏è –ó–∞–∫—Ä—ã—Ç–∞—è —Å–≤–µ—á–∞: ${data.symbol}@${data.interval} - ${data.close}`);
      } else {
        // –õ–æ–≥–∏—Ä—É–µ–º –∂–∏–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ–∂–µ (–∫–∞–∂–¥—É—é 10-—é)
        if (Math.random() < 0.1) {
          console.log(`[WebSocket] üìä –ñ–∏–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: ${data.symbol}@${data.interval} - ${data.close}`);
        }
      }

    } catch (error) {
      console.error('[WebSocket] ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ kline –¥–∞–Ω–Ω—ã—Ö:', error);
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ä–∞–∑—Ä—ã–≤–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
   */
  private handleReconnection(): void {
    if (this.reconnectAttempts >= this.maxReconnectAttempts) {
      console.error(`[WebSocket] ‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (${this.maxReconnectAttempts})`);
      return;
    }

    this.reconnectAttempts++;
    const delay = this.reconnectDelay * Math.pow(2, this.reconnectAttempts - 1);

    console.log(`[WebSocket] üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ${this.reconnectAttempts}/${this.maxReconnectAttempts} —á–µ—Ä–µ–∑ ${delay}–º—Å`);

    this.reconnectTimeout = setTimeout(async () => {
      if (this.activeStream && this.subscriptions.size > 0) {
        try {
          await this.connect();
        } catch (error) {
          console.error('[WebSocket] ‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
          this.handleReconnection();
        }
      }
    }, delay);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
   */
  async isAvailable(): Promise<boolean> {
    return this.isConnected && this.ws?.readyState === WebSocket.OPEN;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–∏—Ö –ø–æ–¥–ø–∏—Å–∫–∞—Ö
   */
  getSubscriptionsInfo(): { activeStream: string | null; subscriptionsCount: number; handlersCount: number } {
    const handlersCount = Array.from(this.subscriptions.values()).reduce((total, handlers) => total + handlers.length, 0);
    
    return {
      activeStream: this.activeStream,
      subscriptionsCount: this.subscriptions.size,
      handlersCount
    };
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é –ø–æ–¥–ø–∏—Å–∫—É (legacy –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
   */
  getCurrentSubscription(): { symbol: string; interval: string } | null {
    if (!this.activeStream) {
      return null;
    }

    const match = this.activeStream.match(/^(.+)@kline_(.+)$/);
    if (match) {
      return {
        symbol: match[1].toUpperCase(),
        interval: match[2]
      };
    }

    return null;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ—Ç–æ–∫–∞
   */
  getLastData(symbol: string, interval: string): BinanceKlineWebSocketData | null {
    const streamKey = `${symbol.toLowerCase()}@kline_${interval}`;
    return this.lastDataCache.get(streamKey) || null;
  }
} 