import { DependencyContainer } from '../../../Shared/infrastructure/DependencyContainer';
import { ICryptoDataRepository } from '../../Domain/repositories/ICryptoDataRepository';
import { BinanceApiService } from '../external-services/BinanceApiService';
import { BinanceWebSocketService } from '../external-services/BinanceWebSocketService';
import { BinanceCryptoDataRepository } from '../repositories/BinanceCryptoDataRepository';
import { GetCryptoDataUseCase } from '../../Application/use-cases/GetCryptoDataUseCase';
import { SubscribeToRealTimeDataUseCase } from '../../Application/use-cases/SubscribeToRealTimeDataUseCase';

export class CryptoDataDependencyConfig {
  static configure(container: DependencyContainer): void {
    try {
      console.log('üîß [CryptoDataDependencyConfig] –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é...');
      
      // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º Binance API —Å–µ—Ä–≤–∏—Å –∫–∞–∫ —Å–∏–Ω–≥–ª—Ç–æ–Ω
      console.log('üîß [CryptoDataDependencyConfig] –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º BinanceApiService...');
      container.register<BinanceApiService>('BinanceApiService', () => {
        try {
          return BinanceApiService.getInstance();
        } catch (error) {
          console.error('[CryptoDataDependencyConfig] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è BinanceApiService:', error);
          throw error;
        }
      });

      // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º Binance WebSocket —Å–µ—Ä–≤–∏—Å –∫–∞–∫ —Å–∏–Ω–≥–ª—Ç–æ–Ω
      console.log('üîß [CryptoDataDependencyConfig] –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º BinanceWebSocketService...');
      container.register<BinanceWebSocketService>('BinanceWebSocketService', () => {
        try {
          return BinanceWebSocketService.getInstance();
        } catch (error) {
          console.error('[CryptoDataDependencyConfig] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è BinanceWebSocketService:', error);
          throw error;
        }
      });

      // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
      console.log('üîß [CryptoDataDependencyConfig] –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π...');
      container.register<ICryptoDataRepository>('ICryptoDataRepository', () => {
        try {
          const apiService = container.resolve<BinanceApiService>('BinanceApiService');
          return new BinanceCryptoDataRepository(apiService);
        } catch (error) {
          console.error('[CryptoDataDependencyConfig] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è:', error);
          throw error;
        }
      });

      // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º Use Cases
      console.log('üîß [CryptoDataDependencyConfig] –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º use cases...');
      container.register<GetCryptoDataUseCase>('GetCryptoDataUseCase', () => {
        try {
          const repository = container.resolve<ICryptoDataRepository>('ICryptoDataRepository');
          return new GetCryptoDataUseCase(repository);
        } catch (error) {
          console.error('[CryptoDataDependencyConfig] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è GetCryptoDataUseCase:', error);
          throw error;
        }
      });

      container.register<SubscribeToRealTimeDataUseCase>('SubscribeToRealTimeDataUseCase', () => {
        try {
          return new SubscribeToRealTimeDataUseCase();
        } catch (error) {
          console.error('[CryptoDataDependencyConfig] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è SubscribeToRealTimeDataUseCase:', error);
          throw error;
        }
      });
      
      console.log('‚úÖ [CryptoDataDependencyConfig] –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    } catch (error) {
      console.error('‚ùå [CryptoDataDependencyConfig] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error);
      throw error;
    }
  }
} 