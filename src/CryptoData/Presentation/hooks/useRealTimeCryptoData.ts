import { useState, useEffect, useCallback } from 'react';
import { DependencyContainer } from '../../../Shared/infrastructure/DependencyContainer';
import { SubscribeToRealTimeDataUseCase } from '../../Application/use-cases/SubscribeToRealTimeDataUseCase';
import { BinanceKlineWebSocketData } from '../../Infrastructure/external-services/BinanceWebSocketService';
import { Symbol } from '../../Domain/value-objects/Symbol';
import { Timeframe } from '../../Domain/value-objects/Timeframe';

export interface UseRealTimeCryptoDataResult {
  isConnected: boolean;
  currentSubscription: { symbol: string; interval: string } | null;
  lastUpdate: BinanceKlineWebSocketData | null;
  error: string | null;
  subscribe: (symbol: string, timeframe: string) => Promise<void>;
  unsubscribe: () => Promise<void>;
}

export function useRealTimeCryptoData(): UseRealTimeCryptoDataResult {
  const [isConnected, setIsConnected] = useState(false);
  const [currentSubscription, setCurrentSubscription] = useState<{ symbol: string; interval: string } | null>(null);
  const [lastUpdate, setLastUpdate] = useState<BinanceKlineWebSocketData | null>(null);
  const [error, setError] = useState<string | null>(null);

  // –ü–æ–ª—É—á–∞–µ–º Use Case –∏–∑ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
  const getUseCase = useCallback(() => {
    const container = DependencyContainer.getInstance();
    return container.resolve<SubscribeToRealTimeDataUseCase>('SubscribeToRealTimeDataUseCase');
  }, []);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π real-time –¥–∞–Ω–Ω—ã—Ö
  const handleDataUpdate = useCallback((data: BinanceKlineWebSocketData) => {
    console.log(`[useRealTimeCryptoData] üîÑ Real-time data received:`, {
      symbol: data.symbol,
      interval: data.interval,
      price: data.close,
      volume: data.volume,
      timestamp: data.timestamp
    });
    
    setLastUpdate(data);
    setError(null);
  }, []);

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ real-time –¥–∞–Ω–Ω—ã–µ
  const subscribe = useCallback(async (symbol: string, timeframe: string) => {
    try {
      setError(null);
      
      // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—ã—Ç–∞–µ–º—Å—è –ª–∏ –º—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç—É –∂–µ –ø–æ–¥–ø–∏—Å–∫—É
      // –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
      if (currentSubscription && 
          currentSubscription.symbol === symbol && 
          currentSubscription.interval === timeframe) {
        console.log(`[useRealTimeCryptoData] ‚ÑπÔ∏è Already subscribed to ${symbol}@${timeframe}, skipping duplicate subscription`);
        return;
      }
      
      const useCase = getUseCase();
      
      const result = await useCase.execute({
        symbol: new Symbol(symbol),
        timeframe: new Timeframe(timeframe as '1h' | '8h' | '1d' | '1w' | '1M'),
        onDataUpdate: handleDataUpdate
      });

      if (result.isSuccess) {
        setIsConnected(true);
        setCurrentSubscription({ symbol, interval: timeframe });
      } else {
        setError(result.error);
      }
    } catch (err) {
      const errorMsg = `Failed to subscribe: ${err instanceof Error ? err.message : 'Unknown error'}`;
      setError(errorMsg);
    }
  }, [getUseCase, handleDataUpdate]);

  // –û—Ç–ø–∏—Å–∫–∞ –æ—Ç real-time –¥–∞–Ω–Ω—ã—Ö
  const unsubscribe = useCallback(async () => {
    try {
      const useCase = getUseCase();
      const result = await useCase.unsubscribe();

      if (result.isSuccess) {
        setIsConnected(false);
        setCurrentSubscription(null);
        setLastUpdate(null);
      } else {
        setError(result.error);
      }
    } catch (err) {
      const errorMsg = `Failed to unsubscribe: ${err instanceof Error ? err.message : 'Unknown error'}`;
      setError(errorMsg);
    }
  }, [getUseCase]);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
  useEffect(() => {
    const checkConnection = async () => {
      const useCase = getUseCase();
      const connected = await useCase.isConnected();
      setIsConnected(connected);
      
      if (connected) {
        const subscription = useCase.getCurrentSubscription();
        setCurrentSubscription(subscription);
      }
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥ (–≤–º–µ—Å—Ç–æ 5) –¥–ª—è –¥–Ω–µ–≤–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
    const interval = setInterval(checkConnection, 30000);
    checkConnection(); // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞

    return () => clearInterval(interval);
  }, []); // –£–±–∏—Ä–∞–µ–º getUseCase –∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π, —Ç–∞–∫ –∫–∞–∫ –æ–Ω —Å—Ç–∞–±–∏–ª–µ–Ω

  return {
    isConnected,
    currentSubscription,
    lastUpdate,
    error,
    subscribe,
    unsubscribe
  };
} 