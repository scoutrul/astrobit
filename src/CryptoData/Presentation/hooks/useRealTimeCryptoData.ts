import { useState, useEffect, useCallback, useRef } from 'react';
import { DependencyContainer } from '../../../Shared/infrastructure/DependencyContainer';
import { SubscribeToRealTimeDataUseCase } from '../../Application/use-cases/SubscribeToRealTimeDataUseCase';
import { BinanceKlineWebSocketData } from '../../Infrastructure/external-services/BinanceWebSocketService';
import { Symbol } from '../../Domain/value-objects/Symbol';
import { Timeframe } from '../../Domain/value-objects/Timeframe';

export interface UseRealTimeCryptoDataResult {
  isConnected: boolean;
  currentSubscription: { symbol: string; interval: string } | null;
  lastUpdate: BinanceKlineWebSocketData | null;
  error: string | null;
  subscribe: (symbol: string, timeframe: string) => Promise<void>;
  unsubscribe: () => Promise<void>;
  // –ù–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  getSubscriptionInfo: () => { activeStream: string | null; subscriptionsCount: number; handlersCount: number };
}

export function useRealTimeCryptoData(): UseRealTimeCryptoDataResult {
  const [isConnected, setIsConnected] = useState(false);
  const [currentSubscription, setCurrentSubscription] = useState<{ symbol: string; interval: string } | null>(null);
  const [lastUpdate, setLastUpdate] = useState<BinanceKlineWebSocketData | null>(null);
  const [error, setError] = useState<string | null>(null);

  // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è —ç—Ç–æ–≥–æ —Ö—É–∫–∞
  const subscriberId = useRef<string>(`hook_${Date.now()}_${Math.random()}`);
  
  // –¢–µ–∫—É—â–∞—è –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
  const activeSubscriptionRef = useRef<{ symbol: string; timeframe: string } | null>(null);
  
  // –¢–∞–π–º–µ—Ä –¥–ª—è debounce –ø–æ–¥–ø–∏—Å–æ–∫
  const subscribeTimeoutRef = useRef<NodeJS.Timeout | null>(null);

  // –ü–æ–ª—É—á–∞–µ–º Use Case –∏–∑ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
  const getUseCase = useCallback(() => {
    const container = DependencyContainer.getInstance();
    return container.resolve<SubscribeToRealTimeDataUseCase>('SubscribeToRealTimeDataUseCase');
  }, []);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π real-time –¥–∞–Ω–Ω—ã—Ö
  const handleDataUpdate = useCallback((data: BinanceKlineWebSocketData) => {
    setLastUpdate(data);
    setError(null);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
    setIsConnected(true);
    if (!currentSubscription || 
        currentSubscription.symbol !== data.symbol || 
        currentSubscription.interval !== data.interval) {
      setCurrentSubscription({ symbol: data.symbol, interval: data.interval });
    }
  }, [currentSubscription]);

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ real-time –¥–∞–Ω–Ω—ã–µ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
  const subscribe = useCallback(async (symbol: string, timeframe: string) => {
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä
    if (subscribeTimeoutRef.current) {
      clearTimeout(subscribeTimeoutRef.current);
    }

    // Debounce –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
    subscribeTimeoutRef.current = setTimeout(async () => {
      try {
        setError(null);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Ç–æ–π –∂–µ –ø–æ–¥–ø–∏—Å–∫–æ–π
        if (activeSubscriptionRef.current && 
            activeSubscriptionRef.current.symbol === symbol && 
            activeSubscriptionRef.current.timeframe === timeframe) {
          return;
        }

        const useCase = getUseCase();
        
        // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ —ç—Ç–æ–≥–æ —Ö—É–∫–∞
        if (activeSubscriptionRef.current) {
          try {
            await useCase.unsubscribeHandler(subscriberId.current);
          } catch (unsubError) {
            // –û—à–∏–±–∫–∞ –æ—Ç–ø–∏—Å–∫–∏
          }
        }
        
        const result = await useCase.executeWithId({
          symbol: new Symbol(symbol),
          timeframe: new Timeframe(timeframe as '1h' | '8h' | '1d' | '1w' | '1M'),
          onDataUpdate: handleDataUpdate,
          subscriberId: subscriberId.current
        });

        if (result.isSuccess) {
          activeSubscriptionRef.current = { symbol, timeframe };
          setCurrentSubscription({ symbol, interval: timeframe });
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
          const webSocketService = useCase.getWebSocketService();
          const cachedData = webSocketService.getLastData(symbol, timeframe);
          if (cachedData) {
            setLastUpdate(cachedData);
          }
        } else {
          setError(result.error);
        }
      } catch (err) {
        const errorMsg = `Failed to subscribe: ${err instanceof Error ? err.message : 'Unknown error'}`;
        setError(errorMsg);
      }
    }, 100); // 100ms debounce
  }, [getUseCase, handleDataUpdate]);

  // –û—Ç–ø–∏—Å–∫–∞ –æ—Ç real-time –¥–∞–Ω–Ω—ã—Ö
  const unsubscribe = useCallback(async () => {
    try {
      if (!activeSubscriptionRef.current) {
        return;
      }

      const useCase = getUseCase();
      const result = await useCase.unsubscribeHandler(subscriberId.current);

      if (result.isSuccess) {
        activeSubscriptionRef.current = null;
        setIsConnected(false);
        setCurrentSubscription(null);
        setLastUpdate(null);
      } else {
        setError(result.error);
      }
    } catch (err) {
      const errorMsg = `Failed to unsubscribe: ${err instanceof Error ? err.message : 'Unknown error'}`;
      setError(errorMsg);
    }
  }, [getUseCase]);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  const getSubscriptionInfo = useCallback(() => {
    try {
      const useCase = getUseCase();
      const webSocketService = useCase.getWebSocketService();
      return webSocketService.getSubscriptionsInfo();
    } catch (error) {
      return { activeStream: null, subscriptionsCount: 0, handlersCount: 0 };
    }
  }, [getUseCase]);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏
  useEffect(() => {
    const checkConnection = async () => {
      try {
        const useCase = getUseCase();
        const connected = await useCase.isConnected();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è
        setIsConnected(prevConnected => {
          if (prevConnected !== connected) {
            // console.log(`[useRealTimeCryptoData] üîå –°—Ç–∞—Ç—É—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–∏–ª—Å—è: ${connected}`);
          }
          return connected;
        });
        
        if (connected) {
          const subscription = useCase.getCurrentSubscription();
          setCurrentSubscription(subscription);
        }
      } catch (error) {
        // console.error('[useRealTimeCryptoData] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', error);
        setIsConnected(false);
      }
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    const interval = setInterval(checkConnection, 30000);
    checkConnection(); // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞

    return () => clearInterval(interval);
  }, [getUseCase]);

  // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    return () => {
      // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä debounce
      if (subscribeTimeoutRef.current) {
        clearTimeout(subscribeTimeoutRef.current);
      }

      if (activeSubscriptionRef.current) {
        // console.log(`[useRealTimeCryptoData] üßπ –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ (ID: ${subscriberId.current})`);
        // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø–∏—Å–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
        const cleanup = async () => {
          try {
            const useCase = getUseCase();
            await useCase.unsubscribeHandler(subscriberId.current);
          } catch (error) {
            // console.error('[useRealTimeCryptoData] ‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏:', error);
          }
        };
        cleanup();
      }
    };
  }, [getUseCase]);

  return {
    isConnected,
    currentSubscription,
    lastUpdate,
    error,
    subscribe,
    unsubscribe,
    getSubscriptionInfo
  };
} 