import { useState, useEffect, useRef, useMemo } from 'react';
import { CryptoData } from '../../Domain/types';
import { DependencyContainer } from '../../../Shared/infrastructure/DependencyContainer';
import { GetCryptoDataUseCase } from '../../Application/use-cases/GetCryptoDataUseCase';

interface UseCryptoDataResult {
  data: CryptoData[];
  loading: boolean;
  error: string | null;
  lastUpdated: Date | null;
  isAuthenticated: boolean;
}

export function useCryptoData(symbol: string, timeframe: string): UseCryptoDataResult {
  const [data, setData] = useState<CryptoData[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [lastUpdated, setLastUpdated] = useState<Date | null>(null);
  const [retryCount, setRetryCount] = useState(0);
  const retryTimeoutRef = useRef<NodeJS.Timeout | null>(null);

  useEffect(() => {
    let isMounted = true;

    // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Å–º–µ–Ω–µ —Å–∏–º–≤–æ–ª–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
    setData([]);
    setLoading(true);
    setError(null);

    const fetchData = async () => {
      if (!symbol || !timeframe) {
        console.warn(`[useCryptoData] ‚ö†Ô∏è Missing symbol or timeframe:`, { symbol, timeframe });
        setLoading(false);
        return;
      }
      
      console.log(`[useCryptoData] üîÑ Fetching data for:`, { symbol, timeframe });

      try {
        setLoading(true);
        setError(null);

        // –ü–æ–ª—É—á–∞–µ–º use case –∏–∑ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        const container = DependencyContainer.getInstance();
        const getCryptoDataUseCase = container.resolve<GetCryptoDataUseCase>('GetCryptoDataUseCase');
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º use case
        const result = await getCryptoDataUseCase.execute({
          symbol: symbol,
          timeframe: timeframe,
          limit: 3000
        });

        if (!isMounted) return;

        if (result.isSuccess) {
          // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–æ–º–µ–Ω–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏ –≤ —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
          const legacyData: CryptoData[] = result.value.data.map(cryptoData => {
            // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ timestamp –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            let timeString: string;
            if (cryptoData.timestamp instanceof Date) {
              timeString = cryptoData.timestamp.toISOString();
            } else if (typeof cryptoData.timestamp === 'number') {
              // –ï—Å–ª–∏ —ç—Ç–æ timestamp –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
              if (cryptoData.timestamp > 1000000000000) {
                timeString = new Date(cryptoData.timestamp).toISOString();
              } else {
                // –ï—Å–ª–∏ —ç—Ç–æ timestamp –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
                timeString = new Date(cryptoData.timestamp * 1000).toISOString();
              }
            } else {
              // –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
              timeString = String(cryptoData.timestamp);
            }
            
            return {
              symbol: cryptoData.symbol.toString(),
              time: timeString,
              open: cryptoData.open,
              high: cryptoData.high,
              low: cryptoData.low,
              close: cryptoData.close,
              volume: cryptoData.volume
            };
          });


          
          setData(legacyData);
          setLastUpdated(new Date());
          setRetryCount(0); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
        } else {
          const errorMsg = `–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: ${result.error}`;
          console.error(`[useCryptoData] ‚ùå ${errorMsg}`);
          
          // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å—é API, –ø—Ä–æ–±—É–µ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å
          if (result.error.includes('not available') && retryCount < 3) {
            // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–∞—É—Ç
            if (retryTimeoutRef.current) {
              clearTimeout(retryTimeoutRef.current);
            }
            retryTimeoutRef.current = setTimeout(() => {
              if (isMounted) {
                setRetryCount(prev => prev + 1);
              }
            }, 2000);
            return;
          }
          
          setError(errorMsg);
        }
      } catch (err) {
        if (!isMounted) return;
        
        const errorMsg = err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏';
        console.error(`[useCryptoData] ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ:`, err);
        
        // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å—é API, –ø—Ä–æ–±—É–µ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å
        if (errorMsg.includes('not available') && retryCount < 3) {
          // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–∞—É—Ç
          if (retryTimeoutRef.current) {
            clearTimeout(retryTimeoutRef.current);
          }
          retryTimeoutRef.current = setTimeout(() => {
            if (isMounted) {
              setRetryCount(prev => prev + 1);
            }
          }, 2000);
          return;
        }
        
        setError(errorMsg);
      } finally {
        if (isMounted) {
          setLoading(false);
        }
      }
    };

    // –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ React.StrictMode –º–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å useEffect –¥–≤–∞–∂–¥—ã
    // –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø–æ–±–æ—á–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
    fetchData();

    return () => {
      isMounted = false;
      // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–∞—É—Ç –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
      if (retryTimeoutRef.current) {
        clearTimeout(retryTimeoutRef.current);
      }
    };
  }, [symbol, timeframe, retryCount]); // –î–æ–±–∞–≤–ª—è–µ–º retryCount –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏

  // –°—Ç–∞–±–∏–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ª–∏—à–Ω–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
  const stableData = useMemo(() => data, [data]);

  return {
    data: stableData,
    loading,
    error,
    lastUpdated,
    isAuthenticated: true // –ù–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  };
} 