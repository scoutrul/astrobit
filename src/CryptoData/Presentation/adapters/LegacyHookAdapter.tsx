import { useState, useEffect } from 'react';
import { GetCryptoDataUseCase } from '../../Application/use-cases/GetCryptoDataUseCase';

/**
 * –ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º useCryptoData hook
 * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–æ–º–µ–Ω–Ω—ã–µ CryptoData –≤ —Ñ–æ—Ä–º–∞—Ç, –æ–∂–∏–¥–∞–µ–º—ã–π —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
 */
export function createLegacyHookAdapter(getCryptoDataUseCase: GetCryptoDataUseCase) {
  return (symbol: string, timeframe: string) => {
    const [data, setData] = useState<Array<{
      symbol: string;
      time: string;
      open: number;
      high: number;
      low: number;
      close: number;
      volume: number;
    }>>([]);
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState<string | null>(null);
    const [lastUpdated, setLastUpdated] = useState<Date | null>(null);

    useEffect(() => {
      let isMounted = true;

      const fetchData = async () => {
        if (!symbol || !timeframe) {
          console.log(`[LegacyHookAdapter] –ü—Ä–æ–ø—É—Å–∫ –∑–∞–≥—Ä—É–∑–∫–∏: symbol=${symbol}, timeframe=${timeframe}`);
          if (isMounted) {
            setLoading(false);
          }
          return;
        }

        try {
          if (isMounted) {
            setLoading(true);
            setError(null);
          }

          console.log(`[LegacyHookAdapter] üîÑ –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–•: ${symbol} —Å —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–º ${timeframe}`);
          
          const result = await getCryptoDataUseCase.execute({
            symbol,
            timeframe,
            limit: 1000
          });

          if (!isMounted) return;

          if (result.isSuccess) {
            console.log(`[LegacyHookAdapter] ‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${result.value.data.length} —Ç–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ${timeframe}`);
            
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–æ–º–µ–Ω–Ω—ã–µ CryptoData –≤ —Ñ–æ—Ä–º–∞—Ç, –æ–∂–∏–¥–∞–µ–º—ã–π —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
            const legacyData = result.value.data.map(cryptoData => cryptoData.toApiFormat());
            
            setData(legacyData);
            setLastUpdated(result.value.lastUpdated);
            setError(null);
          } else {
            const errorMsg = `–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: ${result.error}`;
            console.error(`[LegacyHookAdapter] ‚ùå ${errorMsg}`);
            setError(errorMsg);
          }
        } catch (err) {
          if (!isMounted) return;
          
          const errorMsg = err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏';
          console.error(`[LegacyHookAdapter] ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ:`, err);
          setError(errorMsg);
        } finally {
          if (isMounted) {
            setLoading(false);
          }
        }
      };

      console.log(`[LegacyHookAdapter] üéØ useEffect triggered: symbol=${symbol}, timeframe=${timeframe}`);
      fetchData();

      return () => {
        isMounted = false;
      };
    }, [symbol, timeframe]);

    return {
      data,
      loading,
      error,
      lastUpdated,
      isAuthenticated: true // –í—Å–µ–≥–¥–∞ true –¥–ª—è –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
    };
  };
} 