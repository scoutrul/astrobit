import { useState, useEffect, useRef } from 'react';
import { AstronomicalEvent, astronomicalEventsService } from '../../Infrastructure/services/astronomicalEvents';

interface UseAstronomicalEventsResult {
  events: AstronomicalEvent[];
  loading: boolean;
  error: string | null;
  currentMoonPhase: string;
}

export function useAstronomicalEvents(
  startDate: Date, 
  endDate: Date
): UseAstronomicalEventsResult {
  const [events, setEvents] = useState<AstronomicalEvent[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [currentMoonPhase, setCurrentMoonPhase] = useState<string>('üåô');
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º ref –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
  const calculatedRef = useRef<{
    startDate: number;
    endDate: number;
    events: AstronomicalEvent[];
    moonPhase: string;
  } | null>(null);

  useEffect(() => {
    const calculateEvents = async () => {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã—á–∏—Å–ª—è–ª–∏ –ª–∏ –º—ã —É–∂–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è —ç—Ç–∏—Ö –¥–∞—Ç
        const startTime = startDate.getTime();
        const endTime = endDate.getTime();
        
        if (calculatedRef.current && 
            calculatedRef.current.startDate === startTime && 
            calculatedRef.current.endDate === endTime) {
          setEvents(calculatedRef.current.events);
          setCurrentMoonPhase(calculatedRef.current.moonPhase);
          setLoading(false);
          return;
        }

        setLoading(true);
        setError(null);

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è
        const calculatedEvents = astronomicalEventsService.getEventsForPeriod(startDate, endDate);
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ñ–∞–∑—É –ª—É–Ω—ã
        const moonPhase = astronomicalEventsService.getMoonPhaseForDate(new Date());
        
        // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        calculatedRef.current = {
          startDate: startTime,
          endDate: endTime,
          events: calculatedEvents,
          moonPhase
        };

        setEvents(calculatedEvents);
        setCurrentMoonPhase(moonPhase);

      } catch (err) {
        const errorMsg = err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π';
        console.error('[useAstronomicalEvents] ‚ùå –û—à–∏–±–∫–∞:', err);
        setError(errorMsg);
      } finally {
        setLoading(false);
      }
    };

    if (startDate && endDate) {
      calculateEvents();
    }
  }, [startDate, endDate]); // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∞–º–∏ –æ–±—ä–µ–∫—Ç—ã Date, –æ–Ω–∏ —Ç–µ–ø–µ—Ä—å —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã

  return {
    events,
    loading,
    error,
    currentMoonPhase
  };
} 