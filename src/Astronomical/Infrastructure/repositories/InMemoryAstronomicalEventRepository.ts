import { Result } from '../../../Shared/domain';
import { 
  AstronomicalEvent, 
  EventType, 
  EventSignificance,
  IAstronomicalEventRepository,
  AstronomicalEventSearchCriteria 
} from '../../Domain';

/**
 * In-Memory —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π
 * –°–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è 2022-2027
 */
export class InMemoryAstronomicalEventRepository implements IAstronomicalEventRepository {
  private events: AstronomicalEvent[] = [];

  constructor() {
    try {
      console.log('üîß [InMemoryAstronomicalEventRepository] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è...');
      this.initializeEvents();
      console.log('‚úÖ [InMemoryAstronomicalEventRepository] –°–æ–±—ã—Ç–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
    } catch (error) {
      console.error('‚ùå [InMemoryAstronomicalEventRepository] –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏–π:', error);
    }
  }

  async findByCriteria(criteria: AstronomicalEventSearchCriteria): Promise<Result<AstronomicalEvent[]>> {
    try {
      let filteredEvents = [...this.events];

      // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–µ—Ä–∏–æ–¥—É
      if (criteria.startDate) {
        filteredEvents = filteredEvents.filter(event => 
          event.timestamp >= criteria.startDate!
        );
      }

      if (criteria.endDate) {
        filteredEvents = filteredEvents.filter(event => 
          event.timestamp <= criteria.endDate!
        );
      }

      // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–∏–ø–∞–º
      if (criteria.types && criteria.types.length > 0) {
        filteredEvents = filteredEvents.filter(event => 
          criteria.types!.some(type => type.value === event.type.value)
        );
      }

      // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏
      if (criteria.significance) {
        filteredEvents = filteredEvents.filter(event => 
          event.significance.value === criteria.significance
        );
      }

      // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞
      if (criteria.limit) {
        filteredEvents = filteredEvents.slice(0, criteria.limit);
      }

      return Result.ok(filteredEvents);
    } catch (error) {
      return Result.fail(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–æ–±—ã—Ç–∏–π: ${error}`);
    }
  }

  async findByPeriod(startDate: Date, endDate: Date): Promise<Result<AstronomicalEvent[]>> {
    return this.findByCriteria({ startDate, endDate });
  }

  async findByType(type: EventType): Promise<Result<AstronomicalEvent[]>> {
    return this.findByCriteria({ types: [type] });
  }

  async findByDate(date: Date): Promise<Result<AstronomicalEvent[]>> {
    try {
      const events = this.events.filter(event => event.occurredOn(date));
      return Result.ok(events);
    } catch (error) {
      return Result.fail(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–æ–±—ã—Ç–∏–π –ø–æ –¥–∞—Ç–µ: ${error}`);
    }
  }

  async getCurrentMoonPhase(): Promise<Result<string>> {
    try {
      const now = new Date();
      const phase = this.calculateMoonPhaseForDate(now);
      return Result.ok(phase);
    } catch (error) {
      return Result.fail(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—É—â–µ–π —Ñ–∞–∑—ã –ª—É–Ω—ã: ${error}`);
    }
  }

  async getMoonPhaseForDate(date: Date): Promise<Result<string>> {
    try {
      const phase = this.calculateMoonPhaseForDate(date);
      return Result.ok(phase);
    } catch (error) {
      return Result.fail(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–∑—ã –ª—É–Ω—ã: ${error}`);
    }
  }

  private initializeEvents(): void {
    try {
      console.log('üîß [InMemoryAstronomicalEventRepository] –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Å–æ–±—ã—Ç–∏–π...');
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª—É–Ω–Ω—ã—Ö —Ñ–∞–∑
      console.log('üîß [InMemoryAstronomicalEventRepository] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª—É–Ω–Ω—ã–µ —Ñ–∞–∑—ã...');
      this.initializeMoonPhases();
      console.log('‚úÖ [InMemoryAstronomicalEventRepository] –õ—É–Ω–Ω—ã–µ —Ñ–∞–∑—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥—Ä—É–≥–∏—Ö —Å–æ–±—ã—Ç–∏–π
      // (–∑–¥–µ—Å—å –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –∫–æ–¥ –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞)
      
      console.log('‚úÖ [InMemoryAstronomicalEventRepository] –í—Å–µ —Å–æ–±—ã—Ç–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
    } catch (error) {
      console.error('‚ùå [InMemoryAstronomicalEventRepository] –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏–π:', error);
    }
  }

  private initializeMoonPhases(): void {
    try {
      console.log('üîß [InMemoryAstronomicalEventRepository] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª—É–Ω–Ω—ã–µ —Ñ–∞–∑—ã...');
      
      const moonPhases = [
        { date: new Date('2022-01-02'), phase: '–ù–æ–≤–æ–ª—É–Ω–∏–µ', significance: 'high' as const },
        { date: new Date('2022-01-17'), phase: '–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ', significance: 'high' as const },
        { date: new Date('2022-02-01'), phase: '–ù–æ–≤–æ–ª—É–Ω–∏–µ', significance: 'high' as const },
        { date: new Date('2022-02-16'), phase: '–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ', significance: 'high' as const },
        // –î–æ–±–∞–≤–∏—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–∞–∑—ã –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
      ];

      moonPhases.forEach(({ date, phase, significance }) => {
        try {
          const event = new AstronomicalEvent(
            `moon_phase_${date.getTime()}`,
            date,
            new EventType('moon_phase'),
            phase,
            `–§–∞–∑–∞ –ª—É–Ω—ã: ${phase}`,
            new EventSignificance(significance),
            undefined // price
          );
          this.events.push(event);
        } catch (error) {
          console.error(`‚ùå [InMemoryAstronomicalEventRepository] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è ${phase}:`, error);
        }
      });
      
      console.log(`‚úÖ [InMemoryAstronomicalEventRepository] –°–æ–∑–¥–∞–Ω–æ ${this.events.length} –ª—É–Ω–Ω—ã—Ö —Ñ–∞–∑`);
    } catch (error) {
      console.error('‚ùå [InMemoryAstronomicalEventRepository] –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ª—É–Ω–Ω—ã—Ö —Ñ–∞–∑:', error);
    }
  }

  private calculateMoonPhaseForDate(date: Date): string {
    // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ–∞–∑—ã –ª—É–Ω—ã
    // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç
    const dayOfYear = Math.floor((date.getTime() - new Date(date.getFullYear(), 0, 0).getTime()) / (1000 * 60 * 60 * 24));
    const phase = (dayOfYear % 29.5) / 29.5;
    
    if (phase < 0.125) return '–ù–æ–≤–æ–ª—É–Ω–∏–µ';
    if (phase < 0.375) return '–†–∞—Å—Ç—É—â–∞—è –ª—É–Ω–∞';
    if (phase < 0.5) return '–ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å';
    if (phase < 0.625) return '–†–∞—Å—Ç—É—â–∞—è –ª—É–Ω–∞';
    if (phase < 0.875) return '–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ';
    if (phase < 1) return '–£–±—ã–≤–∞—é—â–∞—è –ª—É–Ω–∞';
    
    return '–ù–æ–≤–æ–ª—É–Ω–∏–µ';
  }
} 