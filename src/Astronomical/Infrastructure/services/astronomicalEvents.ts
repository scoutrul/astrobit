import { AstronomicalDataLoader } from './astronomicalDataLoader';

export interface AstronomicalEvent {
  timestamp: number;
  type: 'moon_phase' | 'planet_aspect' | 'solar_event' | 'lunar_eclipse' | 'solar_eclipse' | 'comet_event' | 'meteor_shower';
  name: string;
  description: string;
  significance: 'low' | 'medium' | 'high';
  price?: number; // For chart overlay
  constellation?: string;
  icon?: string;
}

export class AstronomicalEventsService {
  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
   */
  getEventsForPeriod(startDate: Date, endDate: Date): AstronomicalEvent[] {
    const events: AstronomicalEvent[] = [];
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∏–∑ JSON —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–≥—Ä—É–∑—á–∏–∫
      const jsonEvents = AstronomicalDataLoader.getEventsForPeriod(startDate, endDate);
      
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º JSON —Å–æ–±—ã—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç AstronomicalEvent
      jsonEvents.forEach((jsonEvent: any) => {
        const eventName = jsonEvent.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ';
        
        const event: AstronomicalEvent = {
          timestamp: new Date(jsonEvent.date).getTime(),
          type: this.mapJsonTypeToEventType(jsonEvent.type || ''),
          name: eventName,
          description: jsonEvent.description || '',
          significance: (jsonEvent.significance as 'low' | 'medium' | 'high') || 'medium',
          constellation: jsonEvent.constellation,
          icon: jsonEvent.icon
        };
        events.push(event);
      });

    } catch (error) {
      console.error('[AstronomicalEvents] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–±—ã—Ç–∏–π –∏–∑ JSON:', error);
      
      // Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ JSON –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è
      events.push(...this.getFallbackEvents(startDate, endDate));
    }

    return events.sort((a, b) => a.timestamp - b.timestamp);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–∑—É –ª—É–Ω—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
   */
  getMoonPhaseForDate(date: Date): string {
    try {
      // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
      const lunarCycle = 29.53; // –¥–Ω–µ–π
      const knownNewMoon = new Date('2024-12-30').getTime(); // –∏–∑–≤–µ—Å—Ç–Ω–æ–µ –Ω–æ–≤–æ–ª—É–Ω–∏–µ
      
      const daysSinceNewMoon = (date.getTime() - knownNewMoon) / (1000 * 60 * 60 * 24);
      const phasePosition = (daysSinceNewMoon % lunarCycle) / lunarCycle;
      
      if (phasePosition < 0.125) return 'üåë –ù–æ–≤–æ–ª—É–Ω–∏–µ';
      if (phasePosition < 0.875) return 'üåï –ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ';
      return 'üåë –ù–æ–≤–æ–ª—É–Ω–∏–µ';
      
    } catch (error) {
      console.error('[AstronomicalEvents] –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ–∞–∑—ã –ª—É–Ω—ã:', error);
      return 'üåô –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–æ–±—ã—Ç–∏—è–º
   */
  getEventStatistics(): Record<string, number> {
    try {
      return AstronomicalDataLoader.getEventStatistics();
    } catch (error) {
      console.error('[AstronomicalEvents] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      return {};
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π
   */
  getTotalEventCount(): number {
    try {
      return AstronomicalDataLoader.getTotalEventCount();
    } catch (error) {
      console.error('[AstronomicalEvents] –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ —Å–æ–±—ã—Ç–∏–π:', error);
      return 0;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–æ–±—ã—Ç–∏—è –ø–æ —Ç–∏–ø—É
   */
  getEventsByType(type: string): AstronomicalEvent[] {
    try {
      const jsonEvents = AstronomicalDataLoader.getEventsByType(type);
      return jsonEvents.map((jsonEvent: any) => {
        const eventName = jsonEvent.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ';
        
        return {
          timestamp: new Date(jsonEvent.date).getTime(),
          type: this.mapJsonTypeToEventType(type),
          name: eventName,
          description: jsonEvent.description || '',
          significance: (jsonEvent.significance as 'low' | 'medium' | 'high') || 'medium',
          constellation: jsonEvent.constellation,
          icon: jsonEvent.icon
        };
      });
    } catch (error) {
      console.error('[AstronomicalEvents] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –ø–æ —Ç–∏–ø—É:', error);
      return [];
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–æ–±—ã—Ç–∏—è –ø–æ –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏
   */
  getEventsBySignificance(significance: 'low' | 'medium' | 'high'): AstronomicalEvent[] {
    try {
      const jsonEvents = AstronomicalDataLoader.getEventsBySignificance(significance);
      return jsonEvents.map((jsonEvent: any) => {
        const eventName = jsonEvent.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ';
        
        return {
          timestamp: new Date(jsonEvent.date).getTime(),
          type: this.mapJsonTypeToEventType(jsonEvent.type || 'moon_phase'),
          name: eventName,
          description: jsonEvent.description || '',
          significance: (jsonEvent.significance as 'low' | 'medium' | 'high') || 'medium',
          constellation: jsonEvent.constellation,
          icon: jsonEvent.icon
        };
      });
    } catch (error) {
      console.error('[AstronomicalEvents] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –ø–æ –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏:', error);
      return [];
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–æ–±—ã—Ç–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   */
  getEventsByCategory(category: string): AstronomicalEvent[] {
    try {
      const jsonEvents = AstronomicalDataLoader.getEventsByCategory(category);
      return jsonEvents.map((jsonEvent: any) => {
        const eventName = jsonEvent.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ';
        
        return {
          timestamp: new Date(jsonEvent.date).getTime(),
          type: this.mapJsonTypeToEventType(jsonEvent.type || 'moon_phase'),
          name: eventName,
          description: jsonEvent.description || '',
          significance: (jsonEvent.significance as 'low' | 'medium' | 'high') || 'medium',
          constellation: jsonEvent.constellation,
          icon: jsonEvent.icon
        };
      });
    } catch (error) {
      console.error('[AstronomicalEvents] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', error);
      return [];
    }
  }

  /**
   * –ú–∞–ø–ø–∏–Ω–≥ —Ç–∏–ø–∞ –∏–∑ JSON –≤ —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è
   */
  private mapJsonTypeToEventType(jsonType: string): AstronomicalEvent['type'] {
    switch (jsonType) {
      case 'moon_phase':
        return 'moon_phase';
      case 'planet_aspect':
        return 'planet_aspect';
      case 'solar_event':
        return 'solar_event';
      case 'lunar_eclipse':
        return 'lunar_eclipse';
      case 'solar_eclipse':
        return 'solar_eclipse';
      case 'comet_event':
        return 'comet_event';
      case 'meteor_shower':
        return 'meteor_shower';
      default:
        return 'moon_phase';
    }
  }

  /**
   * Fallback —Å–æ–±—ã—Ç–∏—è –µ—Å–ª–∏ JSON –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è
   */
  private getFallbackEvents(startDate: Date, endDate: Date): AstronomicalEvent[] {
    const events: AstronomicalEvent[] = [];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –ª—É–Ω–Ω—ã–µ —Ñ–∞–∑—ã –∫–∞–∫ fallback
    const currentDate = new Date(startDate);
    while (currentDate <= endDate) {
      const phase = this.getMoonPhaseForDate(currentDate);
      if (phase.includes('–ù–æ–≤–æ–ª—É–Ω–∏–µ') || phase.includes('–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ')) {
        events.push({
          timestamp: currentDate.getTime(),
          type: 'moon_phase',
          name: phase.includes('–ù–æ–≤–æ–ª—É–Ω–∏–µ') ? '–ù–æ–≤–æ–ª—É–Ω–∏–µ' : '–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ',
          description: phase,
          significance: 'high'
        });
      }
      currentDate.setDate(currentDate.getDate() + 1);
    }

    return events;
  }
}

export const astronomicalEventsService = new AstronomicalEventsService(); 