import { ValueObject } from '../../../Shared/domain';
import { AstronomicalDataLoader } from '../../Infrastructure/services/astronomicalDataLoader';

/**
 * –¢–∏–ø—ã –∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π
 */
export type AstronomicalEventType = 
  | 'moon_phase'
  | 'planet_aspect'
  | 'solar_event'
  | 'lunar_eclipse'
  | 'solar_eclipse'
  | 'comet_event'
  | 'meteor_shower';

/**
 * Value Object –¥–ª—è —Ç–∏–ø–∞ –∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
 */
export class EventType extends ValueObject<EventType> {
  private static eventTypesData: any = null;

  constructor(private readonly _value: AstronomicalEventType) {
    super();
    this.validate();
  }

  get value(): AstronomicalEventType {
    return this._value;
  }

  private validate(): void {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ —Ç–∏–ø—ã –∏–∑ JSON –¥–∞–Ω–Ω—ã—Ö
      if (!EventType.eventTypesData) {
        EventType.eventTypesData = AstronomicalDataLoader.getEventTypes();
      }

      const validTypes = EventType.eventTypesData.types.map((type: any) => type.value);
      
      if (!validTypes.includes(this._value)) {
        throw new Error(`–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è: ${this._value}`);
      }
    } catch (error) {
      console.warn('[EventType] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ JSON –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback:', error);
      // Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–µ –≤–∞–ª–∏–¥–Ω—ã–µ —Ç–∏–ø—ã –µ—Å–ª–∏ JSON –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è
      const fallbackTypes: AstronomicalEventType[] = [
        'moon_phase',
        'planet_aspect',
        'solar_event',
        'lunar_eclipse',
        'solar_eclipse',
        'comet_event',
        'meteor_shower'
      ];

      if (!fallbackTypes.includes(this._value)) {
        throw new Error(`–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è: ${this._value}`);
      }
    }
  }

  clone(): EventType {
    return new EventType(this._value);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
   */
  getMetadata(): { label: string; icon: string; description: string; category: string } | null {
    try {
      if (!EventType.eventTypesData) {
        EventType.eventTypesData = AstronomicalDataLoader.getEventTypes();
      }

      const typeData = EventType.eventTypesData.types.find((type: any) => type.value === this._value);
      return typeData || null;
    } catch (error) {
      console.error('[EventType] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö:', error);
      return null;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
   */
  getCategory(): string {
    const metadata = this.getMetadata();
    return metadata?.category || 'unknown';
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏–∫–æ–Ω–∫—É —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
   */
  getIcon(): string {
    const metadata = this.getMetadata();
    return metadata?.icon || 'üåô';
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
   */
  getDescription(): string {
    const metadata = this.getMetadata();
    return metadata?.description || '–ê—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–µ —Å–æ–±—ã—Ç–∏–µ';
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–±—ã—Ç–∏–µ –ª—É–Ω–Ω—ã–º
   */
  isLunar(): boolean {
    return this._value === 'moon_phase' || this._value === 'lunar_eclipse';
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–±—ã—Ç–∏–µ —Å–æ–ª–Ω–µ—á–Ω—ã–º
   */
  isSolar(): boolean {
    return this._value === 'solar_event' || this._value === 'solar_eclipse';
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–±—ã—Ç–∏–µ –ø–ª–∞–Ω–µ—Ç–∞—Ä–Ω—ã–º
   */
  isPlanetary(): boolean {
    return this._value === 'planet_aspect';
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–±—ã—Ç–∏–µ –∫–æ—Å–º–∏—á–µ—Å–∫–∏–º
   */
  isCosmic(): boolean {
    return this._value === 'comet_event' || this._value === 'meteor_shower';
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–±—ã—Ç–∏–π
   */
  static getAllTypes(): AstronomicalEventType[] {
    try {
      if (!EventType.eventTypesData) {
        EventType.eventTypesData = AstronomicalDataLoader.getEventTypes();
      }

      return EventType.eventTypesData.types.map((type: any) => type.value);
    } catch (error) {
      // Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–µ —Ç–∏–ø—ã
      return [
        'moon_phase',
        'planet_aspect',
        'solar_event',
        'lunar_eclipse',
        'solar_eclipse',
        'comet_event',
        'meteor_shower'
      ];
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–æ–±—ã—Ç–∏–π
   */
  static getAllCategories(): Record<string, { name: string; color: string; description: string }> {
    try {
      if (!EventType.eventTypesData) {
        EventType.eventTypesData = AstronomicalDataLoader.getEventTypes();
      }

      return EventType.eventTypesData.categories;
    } catch (error) {
      // Fallback –Ω–∞ –±–∞–∑–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      return {
        lunar: {
          name: '–õ—É–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è',
          color: '#fbbf24',
          description: '–°–æ–±—ã—Ç–∏—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –õ—É–Ω–æ–π'
        },
        solar: {
          name: '–°–æ–ª–Ω–µ—á–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è',
          color: '#f59e0b',
          description: '–°–æ–±—ã—Ç–∏—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –°–æ–ª–Ω—Ü–µ–º'
        },
        planetary: {
          name: '–ü–ª–∞–Ω–µ—Ç–∞—Ä–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è',
          color: '#8b5cf6',
          description: '–°–æ–±—ã—Ç–∏—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø–ª–∞–Ω–µ—Ç–∞–º–∏'
        },
        cosmic: {
          name: '–ö–æ—Å–º–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è',
          color: '#10b981',
          description: '–ö–æ–º–µ—Ç—ã, –º–µ—Ç–µ–æ—Ä—ã, –∞—Å—Ç–µ—Ä–æ–∏–¥—ã'
        }
      };
    }
  }
} 