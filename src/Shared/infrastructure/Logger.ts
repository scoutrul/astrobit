/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç console.info –¥–ª—è –ª—É—á—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏ –≤ Playwright –∏ –±—Ä–∞—É–∑–µ—Ä–µ
 */
export class Logger {
  private static instance: Logger;
  private isDevelopment: boolean;

  private constructor() {
    this.isDevelopment = process.env.NODE_ENV === 'development' || 
                        import.meta.env?.MODE === 'development' ||
                        window.location.hostname === 'localhost';
  }

  static getInstance(): Logger {
    if (!Logger.instance) {
      Logger.instance = new Logger();
    }
    return Logger.instance;
  }

  // –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
  info(message: string, ...args: any[]): void {
    if (this.isDevelopment) {
      console.info(`‚ÑπÔ∏è [INFO] ${message}`, ...args);
    }
  }

  warn(message: string, ...args: any[]): void {
    if (this.isDevelopment) {
      console.warn(`‚ö†Ô∏è [WARN] ${message}`, ...args);
    }
  }

  error(message: string, ...args: any[]): void {
    if (this.isDevelopment) {
      console.error(`‚ùå [ERROR] ${message}`, ...args);
    }
  }

  debug(message: string, ...args: any[]): void {
    if (this.isDevelopment) {
      console.info(`üîç [DEBUG] ${message}`, ...args);
    }
  }

  // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤
  component(componentName: string, message: string, ...args: any[]): void {
    this.info(`[${componentName}] ${message}`, ...args);
  }

  repository(repoName: string, message: string, ...args: any[]): void {
    this.info(`[${repoName}] ${message}`, ...args);
  }

  service(serviceName: string, message: string, ...args: any[]): void {
    this.info(`[${serviceName}] ${message}`, ...args);
  }

  useCase(useCaseName: string, message: string, ...args: any[]): void {
    this.info(`[${useCaseName}] ${message}`, ...args);
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
  object(label: string, obj: any): void {
    if (this.isDevelopment) {
      console.info(`üìä [OBJECT] ${label}:`, obj);
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞—Å—Å–∏–≤–æ–≤
  array(label: string, arr: any[]): void {
    if (this.isDevelopment) {
      console.info(`üìã [ARRAY] ${label} (${arr.length} items):`, arr);
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫
  exception(message: string, error: any): void {
    if (this.isDevelopment) {
      console.error(`üí• [EXCEPTION] ${message}:`, error);
      if (error.stack) {
        console.error(`üìö Stack trace:`, error.stack);
      }
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏–Ω–≥–ª—Ç–æ–Ω –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
export const logger = Logger.getInstance();
