export interface AstronomicalEvent {
  timestamp: number;
  name: string;
  description: string;
  type: string;
}

export interface ChartMarker {
  time: number;
  position: 'aboveBar' | 'belowBar' | 'inBar';
  color: string;
  text: string;
  size: number;
  eventData?: AstronomicalEvent; // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
}

export class AstronomicalEventUtils {
  /**
   * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ –º–∞—Ä–∫–µ—Ä—ã –¥–ª—è Lightweight Charts
   */
  static convertEventsToMarkers(events: AstronomicalEvent[]): ChartMarker[] {
    const markers = events
      .map((event) => {
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º timestamp –≤ —Å–µ–∫—É–Ω–¥—ã (lightweight-charts –æ–∂–∏–¥–∞–µ—Ç —Å–µ–∫—É–Ω–¥—ã)
        const timeInSeconds = Math.floor(event.timestamp / 1000);
        
        // –í—ã–±–∏—Ä–∞–µ–º –∏–∫–æ–Ω–∫—É –∏ —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
        const { text, color } = this.getEventIconAndColor(event);
        
        return {
          time: timeInSeconds as any, // –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å lightweight-charts
          position: 'aboveBar' as const,
          color: color,
          text: text,
          size: 2, // –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –ª—É—á—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏
          eventData: event // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è ToolTip
        };
      })
      .filter(marker => marker.time > 0) // –§–∏–ª—å—Ç—Ä—É–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
      .sort((a, b) => a.time - b.time); // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏

    return markers;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–∫–æ–Ω–∫—É –∏ —Ü–≤–µ—Ç –¥–ª—è –∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
   */
  static getEventIconAndColor(event: AstronomicalEvent): { text: string; color: string } {
    let color = '#f7931a'; // –ë–∏—Ç–∫–æ–∏–Ω –æ—Ä–∞–Ω–∂–µ–≤—ã–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    let text = '';
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ event.name —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!event.name) {
      console.warn('[AstronomicalEventUtils] –°–æ–±—ã—Ç–∏–µ –±–µ–∑ –∏–º–µ–Ω–∏:', event);
      return { text: '‚ùì', color: '#6b7280' }; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback –∏–∫–æ–Ω–∫—É
    }
    
    switch (event.type) {
      case 'moon_phase':
        if (event.name.includes('–ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ')) {
          text = 'üåï'; // –ü–æ–ª–Ω–æ–ª—É–Ω–∏–µ
          color = '#fbbf24'; // –ó–æ–ª–æ—Ç–∏—Å—Ç—ã–π
        } else if (event.name.includes('–ù–æ–≤–æ–ª—É–Ω–∏–µ')) {
          text = 'üåë'; // –ù–æ–≤–æ–ª—É–Ω–∏–µ
          color = '#6b7280'; // –°–µ—Ä—ã–π
        } else if (event.name.includes('–ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å')) {
          text = 'üåì'; // –ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å
          color = '#94a3b8'; // –°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π
        } else if (event.name.includes('–ü–æ—Å–ª–µ–¥–Ω—è—è —á–µ—Ç–≤–µ—Ä—Ç—å')) {
          text = 'üåó'; // –ü–æ—Å–ª–µ–¥–Ω—è—è —á–µ—Ç–≤–µ—Ä—Ç—å
          color = '#64748b'; // –¢–µ–º–Ω–æ-—Å–µ—Ä—ã–π
        } else {
          text = 'üåô'; // –û–±—â–∞—è –ª—É–Ω–∞
          color = '#e2e8f0'; // –°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π
        }
        break;
        
      case 'planet_aspect':
        if (event.name.includes('–ü–∞—Ä–∞–¥') || event.name.includes('–ø–∞—Ä–∞–¥')) {
          if (event.name.includes('–ë–æ–ª—å—à–æ–π –ø–∞—Ä–∞–¥') || event.name.includes('7 –ø–ª–∞–Ω–µ—Ç')) {
            text = 'ü™ê'; // –ë–æ–ª—å—à–æ–π –ø–∞—Ä–∞–¥ –ø–ª–∞–Ω–µ—Ç (–°–∞—Ç—É—Ä–Ω –∫–∞–∫ —Å–∏–º–≤–æ–ª)
            color = '#7c3aed'; // –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
          } else if (event.name.includes('6 –ø–ª–∞–Ω–µ—Ç')) {
            text = 'üåå'; // –ü–∞—Ä–∞–¥ 6 –ø–ª–∞–Ω–µ—Ç
            color = '#3b82f6'; // –°–∏–Ω–∏–π
          } else if (event.name.includes('5 –ø–ª–∞–Ω–µ—Ç')) {
            text = '‚≠ê'; // –ü–∞—Ä–∞–¥ 5 –ø–ª–∞–Ω–µ—Ç
            color = '#f59e0b'; // –Ø–Ω—Ç–∞—Ä–Ω—ã–π
          } else {
            text = '‚ú®'; // –ú–∏–Ω–∏-–ø–∞—Ä–∞–¥ –ø–ª–∞–Ω–µ—Ç
            color = '#10b981'; // –ó–µ–ª–µ–Ω—ã–π
          }
        } else if (event.name.includes('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ')) {
          if (event.name.includes('–í–µ–ª–∏–∫–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ') || event.name.includes('–Æ–ø–∏—Ç–µ—Ä–∞ –∏ –°–∞—Ç—É—Ä–Ω–∞')) {
            text = 'üîó'; // –í–µ–ª–∏–∫–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            color = '#dc2626'; // –ö—Ä–∞—Å–Ω—ã–π
          } else if (event.name.includes('–Æ–ø–∏—Ç–µ—Ä')) {
            text = '‚ôÉ'; // –°–∏–º–≤–æ–ª –Æ–ø–∏—Ç–µ—Ä–∞
            color = '#f59e0b'; // –û—Ä–∞–Ω–∂–µ–≤—ã–π
          } else if (event.name.includes('–í–µ–Ω–µ—Ä')) {
            text = '‚ôÄ'; // –°–∏–º–≤–æ–ª –í–µ–Ω–µ—Ä—ã
            color = '#ec4899'; // –†–æ–∑–æ–≤—ã–π
          } else if (event.name.includes('–ú–∞—Ä—Å')) {
            text = '‚ôÇ'; // –°–∏–º–≤–æ–ª –ú–∞—Ä—Å–∞
            color = '#ef4444'; // –ö—Ä–∞—Å–Ω—ã–π
          } else {
            text = 'üîó'; // –û–±—ã—á–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            color = '#6b7280'; // –°–µ—Ä—ã–π
          }
        } else if (event.name.includes('–ú–µ—Ä–∫—É—Ä–∏–π') || event.name.includes('–ú–µ—Ä–∫—É—Ä–∏—è')) {
          text = '‚òø'; // –°–∏–º–≤–æ–ª –ú–µ—Ä–∫—É—Ä–∏—è
          color = '#8b5cf6'; // –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
        } else if (event.name.includes('–í–µ–Ω–µ—Ä')) {
          text = '‚ôÄ'; // –°–∏–º–≤–æ–ª –í–µ–Ω–µ—Ä—ã
          color = '#ec4899'; // –†–æ–∑–æ–≤—ã–π
        } else {
          text = '‚ú®'; // –ó–≤–µ–∑–¥—ã –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø–ª–∞–Ω–µ—Ç–∞—Ä–Ω—ã—Ö –∞—Å–ø–µ–∫—Ç–æ–≤
          color = '#06b6d4'; // –¶–∏–∞–Ω
        }
        break;
        
      case 'solar_event':
        if (event.name.includes('–∑–∞—Ç–º–µ–Ω–∏–µ')) {
          text = 'üåí'; // –ó–∞—Ç–º–µ–Ω–∏–µ
          color = '#dc2626'; // –ö—Ä–∞—Å–Ω—ã–π
        } else if (event.name.includes('—Å–æ–ª–Ω—Ü–µ—Å—Ç–æ—è–Ω–∏–µ')) {
          text = '‚òÄÔ∏è'; // –°–æ–ª–Ω—Ü–µ
          color = '#f59e0b'; // –Ø–Ω—Ç–∞—Ä–Ω—ã–π
        } else if (event.name.includes('—Ä–∞–≤–Ω–æ–¥–µ–Ω—Å—Ç–≤–∏–µ')) {
          text = '‚öñÔ∏è'; // –†–∞–≤–Ω–æ–¥–µ–Ω—Å—Ç–≤–∏–µ
          color = '#10b981'; // –ó–µ–ª–µ–Ω—ã–π
        } else if (event.name.includes('–ì–µ–º–∏–Ω–∏–¥—ã') || event.name.includes('–º–µ—Ç–µ–æ—Ä–Ω—ã–π') || event.name.includes('–ü–µ—Ä—Å–µ–∏–¥—ã')) {
          text = '‚òÑÔ∏è'; // –ú–µ—Ç–µ–æ—Ä
          color = '#8b5cf6'; // –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
        } else {
          text = '‚òâ'; // –°–∏–º–≤–æ–ª —Å–æ–ª–Ω—Ü–∞
          color = '#eab308'; // –ñ–µ–ª—Ç—ã–π
        }
        break;
        
      case 'lunar_eclipse':
        if (event.name.includes('–ü–æ–ª–Ω–æ–µ')) {
          text = 'üî¥'; // –ü–æ–ª–Ω–æ–µ –ª—É–Ω–Ω–æ–µ –∑–∞—Ç–º–µ–Ω–∏–µ (–∫—Ä–∞—Å–Ω–∞—è –ª—É–Ω–∞)
          color = '#dc2626'; // –ö—Ä–∞—Å–Ω—ã–π
        } else if (event.name.includes('–ß–∞—Å—Ç–∏—á–Ω–æ–µ')) {
          text = 'üü†'; // –ß–∞—Å—Ç–∏—á–Ω–æ–µ –ª—É–Ω–Ω–æ–µ –∑–∞—Ç–º–µ–Ω–∏–µ
          color = '#f59e0b'; // –û—Ä–∞–Ω–∂–µ–≤—ã–π
        } else {
          text = 'üü°'; // –ü–æ–ª—É—Ç–µ–Ω–µ–≤–æ–µ –∑–∞—Ç–º–µ–Ω–∏–µ
          color = '#fbbf24'; // –ñ–µ–ª—Ç—ã–π
        }
        break;
        
      case 'solar_eclipse':
        if (event.name.includes('–ü–æ–ª–Ω–æ–µ')) {
          text = 'üåë'; // –ü–æ–ª–Ω–æ–µ —Å–æ–ª–Ω–µ—á–Ω–æ–µ –∑–∞—Ç–º–µ–Ω–∏–µ
          color = '#000000'; // –ß–µ—Ä–Ω—ã–π
        } else if (event.name.includes('–ö–æ–ª—å—Ü–µ–≤–æ–µ')) {
          text = '‚≠ï'; // –ö–æ–ª—å—Ü–µ–≤–æ–µ –∑–∞—Ç–º–µ–Ω–∏–µ
          color = '#dc2626'; // –ö—Ä–∞—Å–Ω—ã–π
        } else if (event.name.includes('–ì–∏–±—Ä–∏–¥–Ω–æ–µ')) {
          text = 'üîÑ'; // –ì–∏–±—Ä–∏–¥–Ω–æ–µ –∑–∞—Ç–º–µ–Ω–∏–µ
          color = '#7c3aed'; // –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
        } else {
          text = 'üåó'; // –ß–∞—Å—Ç–∏—á–Ω–æ–µ –∑–∞—Ç–º–µ–Ω–∏–µ
          color = '#f59e0b'; // –û—Ä–∞–Ω–∂–µ–≤—ã–π
        }
        break;
        
      case 'comet_event':
        if (event.name.includes('–ö–æ–º–µ—Ç–∞')) {
          if (event.name.includes('Leonard') || event.name.includes('ZTF') || event.name.includes('–¶—É—á–∏–Ω—Å–∫–∏—Ö')) {
            text = '‚òÑÔ∏è'; // –Ø—Ä–∫–∏–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–º–µ—Ç—ã
            color = '#f59e0b'; // –û—Ä–∞–Ω–∂–µ–≤—ã–π
          } else {
            text = 'üåü'; // –û–±—ã—á–Ω—ã–µ –∫–æ–º–µ—Ç—ã
            color = '#06b6d4'; // –¶–∏–∞–Ω
          }
        } else if (event.name.includes('–ê—Å—Ç–µ—Ä–æ–∏–¥')) {
          text = 'ü™®'; // –ê—Å—Ç–µ—Ä–æ–∏–¥—ã
          color = '#6b7280'; // –°–µ—Ä—ã–π
        } else {
          text = '‚ú®'; // –ö–æ—Å–º–∏—á–µ—Å–∫–∏–µ –æ–±—ä–µ–∫—Ç—ã
          color = '#8b5cf6'; // –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
        }
        break;
        
      case 'meteor_shower':
        if (event.name.includes('–ö–≤–∞–¥—Ä–∞–Ω—Ç–∏–¥—ã')) {
          text = '‚≠ê'; // –ö–≤–∞–¥—Ä–∞–Ω—Ç–∏–¥—ã - –æ–¥–∏–Ω –∏–∑ –ª—É—á—à–∏—Ö –ø–æ—Ç–æ–∫–æ–≤
          color = '#fbbf24'; // –ó–æ–ª–æ—Ç–∏—Å—Ç—ã–π
        } else if (event.name.includes('–ü–µ—Ä—Å–µ–∏–¥—ã')) {
          text = '‚òÑÔ∏è'; // –ü–µ—Ä—Å–µ–∏–¥—ã - —Å–∞–º—ã–π –∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ—Ç–æ–∫
          color = '#f59e0b'; // –û—Ä–∞–Ω–∂–µ–≤—ã–π
        } else if (event.name.includes('–ì–µ–º–∏–Ω–∏–¥—ã')) {
          text = 'üíé'; // –ì–µ–º–∏–Ω–∏–¥—ã - –ª—É—á—à–∏–π –ø–æ—Ç–æ–∫ –≥–æ–¥–∞
          color = '#06b6d4'; // –¶–∏–∞–Ω
        } else if (event.name.includes('–î—Ä–∞–∫–æ–Ω–∏–¥—ã') && event.description.includes('400')) {
          text = 'üêâ'; // –î—Ä–∞–∫–æ–Ω–∏–¥—ã —Å –≤—Å–ø–ª–µ—Å–∫–æ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
          color = '#dc2626'; // –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
        } else if (event.name.includes('–õ–∏—Ä–∏–¥—ã')) {
          text = 'üéµ'; // –õ–∏—Ä–∏–¥—ã (–æ—Ç —Å–æ–∑–≤–µ–∑–¥–∏—è –õ–∏—Ä—ã)
          color = '#a855f7'; // –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
        } else if (event.name.includes('–õ–µ–æ–Ω–∏–¥—ã')) {
          text = 'ü¶Å'; // –õ–µ–æ–Ω–∏–¥—ã (–æ—Ç —Å–æ–∑–≤–µ–∑–¥–∏—è –õ—å–≤–∞)
          color = '#f59e0b'; // –Ø–Ω—Ç–∞—Ä–Ω—ã–π
        } else if (event.name.includes('–û—Ä–∏–æ–Ω–∏–¥—ã')) {
          text = 'üèπ'; // –û—Ä–∏–æ–Ω–∏–¥—ã (–æ—Ç —Å–æ–∑–≤–µ–∑–¥–∏—è –û—Ä–∏–æ–Ω–∞-–æ—Ö–æ—Ç–Ω–∏–∫–∞)
          color = '#10b981'; // –ó–µ–ª–µ–Ω—ã–π
        } else if (event.name.includes('–ê–∫–≤–∞—Ä–∏–¥—ã')) {
          text = 'üåä'; // –ê–∫–≤–∞—Ä–∏–¥—ã (–æ—Ç —Å–æ–∑–≤–µ–∑–¥–∏—è –í–æ–¥–æ–ª–µ—è)
          color = '#3b82f6'; // –°–∏–Ω–∏–π
        } else if (event.name.includes('–ö–∞–ø—Ä–∏–∫–æ—Ä–Ω–∏–¥—ã')) {
          text = 'üêê'; // –ö–∞–ø—Ä–∏–∫–æ—Ä–Ω–∏–¥—ã (–æ—Ç —Å–æ–∑–≤–µ–∑–¥–∏—è –ö–æ–∑–µ—Ä–æ–≥–∞)
          color = '#6b7280'; // –°–µ—Ä—ã–π
        } else if (event.name.includes('–£—Ä—Å–∏–¥—ã')) {
          text = 'üêª'; // –£—Ä—Å–∏–¥—ã (–æ—Ç —Å–æ–∑–≤–µ–∑–¥–∏—è –ú–∞–ª–æ–π –ú–µ–¥–≤–µ–¥–∏—Ü—ã)
          color = '#8b5cf6'; // –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
        } else {
          text = '‚òÑÔ∏è'; // –û–±—â–∏–π –º–µ—Ç–µ–æ—Ä
          color = '#8b5cf6'; // –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
        }
        break;
        
      default:
        text = '‚≠ê'; // –ó–≤–µ–∑–¥–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        color = '#f7931a';
    }

    return { text, color };
  }

  /**
   * –§–∏–ª—å—Ç—Ä—É–µ—Ç —Å–æ–±—ã—Ç–∏—è –ø–æ –∞–∫—Ç–∏–≤–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º
   */
  static filterEventsByType(
    events: AstronomicalEvent[],
    filters: {
      lunar?: boolean;
      solar?: boolean;
      planetary?: boolean;
      meteor?: boolean;
    }
  ): AstronomicalEvent[] {
    return events.filter(event => {
      switch (event.type) {
        case 'moon_phase':
        case 'lunar_eclipse':
          return filters.lunar !== false;
        case 'solar_event':
        case 'solar_eclipse':
          return filters.solar !== false;
        case 'planet_aspect':
        case 'comet_event':
          return filters.planetary !== false;
        case 'meteor_shower':
          return filters.meteor !== false;
        default:
          return true;
      }
    });
  }

  /**
   * –î–µ–¥—É–ø–ª–∏—Ü–∏—Ä—É–µ—Ç —Å–æ–±—ã—Ç–∏—è –ø–æ timestamp –∏ name
   */
  static deduplicateEvents(events: AstronomicalEvent[]): AstronomicalEvent[] {
    return events.filter((event, index, array) => {
      return array.findIndex(e => 
        e.timestamp === event.timestamp && 
        e.name === event.name
      ) === index;
    });
  }

  /**
   * –ù–∞—Ö–æ–¥–∏—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–∞—Ç—É —Å—Ä–µ–¥–∏ –∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π
   */
  static getMaxEventTime(events: AstronomicalEvent[]): number {
    if (events.length === 0) return 0;
    return Math.max(...events.map(event => Math.floor(event.timestamp / 1000)));
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç tooltip –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
   */
  static createTooltipData(
    event: AstronomicalEvent,
    mouseX: number,
    mouseY: number
  ): {
    x: number;
    y: number;
    title: string;
    description: string;
    visible: boolean;
  } {
    return {
      x: mouseX,
      y: mouseY,
      title: event.name,
      description: event.description,
      visible: true
    };
  }

  /**
   * –ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç —Å–æ–±—ã—Ç–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–º –º–µ—Ç–∫–∞–º —Å —É—á–µ—Ç–æ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
   */
  static groupEventsByTime(
    events: AstronomicalEvent[],
    timeframe: string
  ): Map<number, AstronomicalEvent[]> {
    const groupedEvents = new Map<number, AstronomicalEvent[]>();
    
    events.forEach(event => {
      const timeInSeconds = Math.floor(event.timestamp / 1000);
      const groupedTime = this.getGroupedTime(timeInSeconds, timeframe);
      
      if (!groupedEvents.has(groupedTime)) {
        groupedEvents.set(groupedTime, []);
      }
      groupedEvents.get(groupedTime)!.push(event);
    });
    
    return groupedEvents;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
   */
  private static getGroupedTime(timeInSeconds: number, timeframe: string): number {
    const date = new Date(timeInSeconds * 1000);
    
    switch (timeframe) {
      case '1h':
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —á–∞—Å–∞–º
        date.setMinutes(0, 0, 0);
        break;
      case '8h':
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ 8-—á–∞—Å–æ–≤—ã–º –±–ª–æ–∫–∞–º
        const hour = date.getHours();
        const blockHour = Math.floor(hour / 8) * 8;
        date.setHours(blockHour, 0, 0, 0);
        break;
      case '1d':
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º
        date.setHours(0, 0, 0, 0);
        break;
      case '1w':
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –Ω–µ–¥–µ–ª—è–º (–Ω–∞—á–∞–ª–æ –Ω–µ–¥–µ–ª–∏)
        const dayOfWeek = date.getDay();
        const daysToSubtract = dayOfWeek === 0 ? 0 : dayOfWeek;
        date.setDate(date.getDate() - daysToSubtract);
        date.setHours(0, 0, 0, 0);
        break;
      case '1M':
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –º–µ—Å—è—Ü–∞–º (–Ω–∞—á–∞–ª–æ –º–µ—Å—è—Ü–∞)
        date.setDate(1);
        date.setHours(0, 0, 0, 0);
        break;
      default:
        // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º
        date.setHours(0, 0, 0, 0);
    }
    
    return Math.floor(date.getTime() / 1000);
  }

  /**
   * –ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –Ω–∞ –∑–∞–¥–∞–Ω–Ω–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–µ
   */
  static findEventsAtTime(
    events: AstronomicalEvent[],
    timeInSeconds: number,
    timeframe: string
  ): AstronomicalEvent[] {
    console.log('[AstronomicalEventUtils] üîç findEventsAtTime called:', {
      eventsCount: events.length,
      timeInSeconds,
      timeISO: new Date(timeInSeconds * 1000).toISOString(),
      timeframe
    });

    const groupedTime = this.getGroupedTime(timeInSeconds, timeframe);
    const groupedEvents = this.groupEventsByTime(events, timeframe);
    
    console.log('[AstronomicalEventUtils] üìä Grouping results:', {
      groupedTime,
      groupedTimeISO: new Date(groupedTime * 1000).toISOString(),
      groupedEventsKeys: Array.from(groupedEvents.keys()).map(k => new Date(k * 1000).toISOString()),
      foundEvents: groupedEvents.get(groupedTime) || []
    });
    
    return groupedEvents.get(groupedTime) || [];
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç tooltip –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç—ç–∫–∞ —Å–æ–±—ã—Ç–∏–π
   */
  static createStackedTooltipData(
    events: AstronomicalEvent[],
    mouseX: number,
    mouseY: number
  ): {
    x: number;
    y: number;
    events: AstronomicalEvent[];
    visible: boolean;
  } {
    return {
      x: mouseX,
      y: mouseY,
      events: events.sort((a, b) => a.name.localeCompare(b.name)), // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
      visible: true
    };
  }
} 