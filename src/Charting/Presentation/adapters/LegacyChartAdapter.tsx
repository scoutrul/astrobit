import React, { useMemo, useEffect, useRef } from 'react';
import { useCryptoData } from '../../../CryptoData/Presentation/hooks/useCryptoData';
import { useAstronomicalEvents } from '../../../Astronomical/Presentation/hooks/useAstronomicalEvents';
import { useRealTimeCryptoData } from '../../../CryptoData/Presentation/hooks/useRealTimeCryptoData';
import { useStore } from '../../../Shared/presentation/store';
import { ChartComponent } from '../components/ChartComponent';
import { AstronomicalEvent as NewAstronomicalEvent } from '../../Infrastructure/utils/AstronomicalEventUtils';
import { AstronomicalEvent as OldAstronomicalEvent } from '../../../Astronomical/Infrastructure/services/astronomicalEvents';
import { combineHistoricalAndFutureCandles } from '../../../CryptoData/Infrastructure/utils/futureCandlesGenerator';

interface LegacyChartAdapterProps {
  height?: number;
  className?: string;
  cryptoData?: Array<{
    symbol: string;
    time: string;
    open: number;
    high: number;
    low: number;
    close: number;
    volume: number;
    visible?: boolean;
  }>;
  astronomicalEvents?: NewAstronomicalEvent[];
  eventFilters?: {
    lunar?: boolean;
    solar?: boolean;
    planetary?: boolean;
    meteor?: boolean;
  };
  symbol?: string;
  timeframe?: string;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Å—Ç–∞—Ä—ã—Ö –∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π –≤ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
function convertAstronomicalEvents(oldEvents: OldAstronomicalEvent[]): NewAstronomicalEvent[] {
  return oldEvents.map(event => ({
    timestamp: event.timestamp,
    name: event.name,
    description: event.description,
    type: event.type
  }));
}

export const LegacyChartAdapter: React.FC<LegacyChartAdapterProps> = ({
  height = 500, // –£–≤–µ–ª–∏—á–µ–Ω–∞ –≤—ã—Å–æ—Ç–∞ —Å 400 –¥–æ 500
  className = '',
  cryptoData: propCryptoData,
  astronomicalEvents: propAstronomicalEvents,
  eventFilters = { lunar: true, solar: true, planetary: true, meteor: true },
  symbol: propSymbol,
  timeframe: propTimeframe
}) => {
  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ store
  const { symbol: storeSymbol, timeframe: storeTimeframe } = useStore();
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–ø—Å—ã –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑ store
  const symbol = propSymbol || storeSymbol;
  const timeframe = propTimeframe || storeTimeframe;

  // Real-time –¥–∞–Ω–Ω—ã–µ
  const { 
    lastUpdate, 
    subscribe, 
    unsubscribe 
  } = useRealTimeCryptoData();

  // Ref –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π symbol/timeframe
  const prevSubscription = useRef<{ symbol: string; timeframe: string } | null>(null);

  // –°—Ç–∞–±–∏–ª–∏–∑–∏—Ä—É–µ–º –¥–∞—Ç—ã –¥–ª—è useAstronomicalEvents
  const dateRange = useMemo(() => {
    const now = Date.now();
    return {
      startDate: new Date(now - 365 * 24 * 60 * 60 * 1000), // 1 –≥–æ–¥ –Ω–∞–∑–∞–¥
      endDate: new Date(now + 90 * 24 * 60 * 60 * 1000)    // 3 –º–µ—Å—è—Ü–∞ –≤–ø–µ—Ä–µ–¥
    };
  }, []); // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π - –¥–∞—Ç—ã –Ω–µ –¥–æ–ª–∂–Ω—ã –º–µ–Ω—è—Ç—å—Å—è

  // –ü–æ–ª—É—á–∞–µ–º –∫—Ä–∏–ø—Ç–æ–¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ —Ö—É–∫
  const { data: hookCryptoData, loading: cryptoLoading } = useCryptoData(symbol, timeframe);


  
  // –ü–æ–ª—É—á–∞–µ–º –∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è —Å —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏
  const { events: hookAstronomicalEvents, loading: astroLoading } = useAstronomicalEvents(
    dateRange.startDate,
    dateRange.endDate
  );

  // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–±—ã—Ç–∏—è –≤ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
  const convertedHookEvents = hookAstronomicalEvents ? convertAstronomicalEvents(hookAstronomicalEvents) : [];
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–±—ã—Ç–∏—è –∏–∑ –ø—Ä–æ–ø—Å–æ–≤ –∏–ª–∏ –∏–∑ —Ö—É–∫–∞
  const astronomicalEvents = propAstronomicalEvents || convertedHookEvents || [];

  // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –±—É–¥—É—â–∏—Ö —Å–≤–µ—á–µ–π
  const eventsForGenerator = useMemo(() => {
    return astronomicalEvents.map(event => ({
      id: event.name,
      name: event.name,
      date: new Date(event.timestamp),
      type: event.type,
      description: event.description,
      significance: 'medium'
    }));
  }, [astronomicalEvents.length]); // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ length –≤–º–µ—Å—Ç–æ –≤—Å–µ–≥–æ –º–∞—Å—Å–∏–≤–∞

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –±—É–¥—É—â–∏–µ —Å–≤–µ—á–∏ —Å —É—á–µ—Ç–æ–º —Å–æ–±—ã—Ç–∏–π
  const enhancedCryptoData = useMemo(() => {
    const historicalData = propCryptoData || hookCryptoData || [];
    
    if (historicalData.length === 0) {
      return historicalData;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ visible: true –¥–ª—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    const historicalDataWithVisibility = historicalData.map(item => ({
      ...item,
      visible: true
    }));

    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º–∏ –±—É–¥—É—â–∏–º–∏ —Å–≤–µ—á–∞–º–∏
    let combinedData = combineHistoricalAndFutureCandles(
      historicalDataWithVisibility,
      timeframe,
      eventsForGenerator
    );

    // –ï—Å–ª–∏ –µ—Å—Ç—å real-time –¥–∞–Ω–Ω—ã–µ, –æ–±–Ω–æ–≤–ª—è–µ–º –±—É–¥—É—â–∏–µ —Å–≤–µ—á–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ü–µ–Ω—ã
    if (lastUpdate && combinedData.length > 0) {
      // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–∏–¥–∏–º–æ–π (–∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–π) —Å–≤–µ—á–∏
      const lastHistoricalIndex = historicalDataWithVisibility.length - 1;
      const currentPrice = lastUpdate.close;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –±—É–¥—É—â–∏–µ —Å–≤–µ—á–∏ (–ø–æ—Å–ª–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö) –Ω–∞ —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É, —Å–æ—Ö—Ä–∞–Ω—è—è –Ω–µ–≤–∏–¥–∏–º–æ—Å—Ç—å
      combinedData = combinedData.map((candle, index) => {
        if (index > lastHistoricalIndex) {
          return {
            ...candle,
            open: currentPrice,
            high: currentPrice,
            low: currentPrice,
            close: currentPrice,
            visible: false, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–µ–≤–∏–¥–∏–º–æ—Å—Ç—å –±—É–¥—É—â–∏—Ö —Å–≤–µ—á–µ–π
            volume: 0 // –ù—É–ª–µ–≤–æ–π –æ–±—ä–µ–º –¥–ª—è –±—É–¥—É—â–∏—Ö —Å–≤–µ—á–µ–π
          };
        }
        return candle;
      });
    }


    return combinedData;
  }, [propCryptoData, hookCryptoData, timeframe, eventsForGenerator.length, symbol, lastUpdate?.close]); // –î–æ–±–∞–≤–ª—è–µ–º lastUpdate

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ real-time –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ symbol/timeframe
  useEffect(() => {
    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å symbol –∏ timeframe
    if (!symbol || !timeframe) {
      return;
    }

    const currentSubscription = { symbol, timeframe };
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞
    const hasChanged = !prevSubscription.current || 
      prevSubscription.current.symbol !== symbol || 
      prevSubscription.current.timeframe !== timeframe;
    
    if (hasChanged) {
      console.log(`[LegacyChartAdapter] üîÑ –ü–æ–¥–ø–∏—Å–∫–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å: ${symbol}@${timeframe}`);
      
      // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É (—Å—Ç–∞—Ä–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ–Ω–∏—Ç—Å—è –≤ —Ö—É–∫–µ)
      subscribe(symbol, timeframe);
      prevSubscription.current = currentSubscription;
    }
  }, [symbol, timeframe, subscribe]);

  // –û—Ç–¥–µ–ª—å–Ω—ã–π useEffect –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    return () => {
      if (prevSubscription.current) {
        console.log(`[LegacyChartAdapter] üßπ –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏`);
        unsubscribe();
        prevSubscription.current = null;
      }
    };
  }, [unsubscribe]);

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
  useEffect(() => {
    if (lastUpdate) {
      // Real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    }
  }, [lastUpdate]);


  return (
    <ChartComponent
      symbol={symbol}
      timeframe={timeframe}
      height={height}
      className={className}
      cryptoData={enhancedCryptoData}
      astronomicalEvents={astronomicalEvents}
      eventFilters={eventFilters}
      isLoading={cryptoLoading || astroLoading}
      realTimeData={lastUpdate}
    />
  );
}; 