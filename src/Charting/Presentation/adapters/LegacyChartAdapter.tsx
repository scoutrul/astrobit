import React, { useMemo, useEffect, useRef } from 'react';
import { useCryptoData } from '../../../hooks/useCryptoData';
import { useAstronomicalEvents } from '../../../hooks/useAstronomicalEvents';
import { useRealTimeCryptoData } from '../../../hooks/useRealTimeCryptoData';
import { useStore } from '../../../store';
import { ChartComponent } from '../components/ChartComponent';
import { AstronomicalEvent as NewAstronomicalEvent } from '../../Infrastructure/utils/AstronomicalEventUtils';
import { AstronomicalEvent as OldAstronomicalEvent } from '../../../services/astronomicalEvents';
import { combineHistoricalAndFutureCandles } from '../../../utils/futureCandlesGenerator';

interface LegacyChartAdapterProps {
  height?: number;
  className?: string;
  cryptoData?: Array<{
    symbol: string;
    time: string;
    open: number;
    high: number;
    low: number;
    close: number;
    volume: number;
  }>;
  astronomicalEvents?: NewAstronomicalEvent[];
  eventFilters?: {
    lunar?: boolean;
    solar?: boolean;
    planetary?: boolean;
    meteor?: boolean;
  };
  symbol?: string;
  timeframe?: string;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Å—Ç–∞—Ä—ã—Ö –∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π –≤ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
function convertAstronomicalEvents(oldEvents: OldAstronomicalEvent[]): NewAstronomicalEvent[] {
  return oldEvents.map(event => ({
    timestamp: event.timestamp,
    name: event.name,
    description: event.description,
    type: event.type
  }));
}

export const LegacyChartAdapter: React.FC<LegacyChartAdapterProps> = ({
  height = 500, // –£–≤–µ–ª–∏—á–µ–Ω–∞ –≤—ã—Å–æ—Ç–∞ —Å 400 –¥–æ 500
  className = '',
  cryptoData: propCryptoData,
  astronomicalEvents: propAstronomicalEvents,
  eventFilters = { lunar: true, solar: true, planetary: true, meteor: true },
  symbol: propSymbol,
  timeframe: propTimeframe
}) => {
  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ store
  const { symbol: storeSymbol, timeframe: storeTimeframe } = useStore();
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–ø—Å—ã –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑ store
  const symbol = propSymbol || storeSymbol;
  const timeframe = propTimeframe || storeTimeframe;

  // Real-time –¥–∞–Ω–Ω—ã–µ
  const { 
    isConnected, 
    currentSubscription, 
    lastUpdate, 
    subscribe, 
    unsubscribe 
  } = useRealTimeCryptoData();

  // Ref –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π symbol/timeframe
  const prevSubscription = useRef<{ symbol: string; timeframe: string } | null>(null);

  // –°—Ç–∞–±–∏–ª–∏–∑–∏—Ä—É–µ–º –¥–∞—Ç—ã –¥–ª—è useAstronomicalEvents
  const dateRange = useMemo(() => {
    const now = Date.now();
    return {
      startDate: new Date(now - 365 * 24 * 60 * 60 * 1000), // 1 –≥–æ–¥ –Ω–∞–∑–∞–¥
      endDate: new Date(now + 90 * 24 * 60 * 60 * 1000)    // 3 –º–µ—Å—è—Ü–∞ –≤–ø–µ—Ä–µ–¥
    };
  }, []); // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π - –¥–∞—Ç—ã –Ω–µ –¥–æ–ª–∂–Ω—ã –º–µ–Ω—è—Ç—å—Å—è

  // –ü–æ–ª—É—á–∞–µ–º –∫—Ä–∏–ø—Ç–æ–¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ —Ö—É–∫
  const { data: hookCryptoData, loading: cryptoLoading, error: cryptoError } = useCryptoData(symbol, timeframe);
  
  // –ü–æ–ª—É—á–∞–µ–º –∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è —Å —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏
  const { events: hookAstronomicalEvents, loading: astroLoading } = useAstronomicalEvents(
    dateRange.startDate,
    dateRange.endDate
  );

  // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–±—ã—Ç–∏—è –≤ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
  const convertedHookEvents = hookAstronomicalEvents ? convertAstronomicalEvents(hookAstronomicalEvents) : [];
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–±—ã—Ç–∏—è –∏–∑ –ø—Ä–æ–ø—Å–æ–≤ –∏–ª–∏ –∏–∑ —Ö—É–∫–∞
  const astronomicalEvents = propAstronomicalEvents || convertedHookEvents || [];

  // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –±—É–¥—É—â–∏—Ö —Å–≤–µ—á–µ–π
  const eventsForGenerator = useMemo(() => {
    return astronomicalEvents.map(event => ({
      id: event.name,
      name: event.name,
      date: new Date(event.timestamp),
      type: event.type,
      description: event.description,
      significance: 'medium'
    }));
  }, [astronomicalEvents]);

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –±—É–¥—É—â–∏–µ —Å–≤–µ—á–∏ —Å —É—á–µ—Ç–æ–º —Å–æ–±—ã—Ç–∏–π
  const enhancedCryptoData = useMemo(() => {
    const historicalData = propCryptoData || hookCryptoData || [];
    
    if (historicalData.length === 0) {
      return historicalData;
    }

    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º–∏ –±—É–¥—É—â–∏–º–∏ —Å–≤–µ—á–∞–º–∏
    const combinedData = combineHistoricalAndFutureCandles(
      historicalData,
      timeframe,
      eventsForGenerator
    );

    console.log('[LegacyChartAdapter] üîÆ –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤–µ—á–µ–π:', {
      symbol,
      timeframe,
      historicalCount: historicalData.length,
      eventsCount: eventsForGenerator.length,
      combinedCount: combinedData.length,
      futureCount: combinedData.length - historicalData.length
    });

    return combinedData;
  }, [propCryptoData, hookCryptoData, timeframe, eventsForGenerator]);

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ WebSocket –ø–æ–¥–ø–∏—Å–∫–æ–π
  useEffect(() => {
    const currentSub = { symbol, timeframe };
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–ø–∏—Å–∫–∏
    if (
      !prevSubscription.current ||
      prevSubscription.current.symbol !== symbol ||
      prevSubscription.current.timeframe !== timeframe
    ) {
      console.log('[LegacyChartAdapter] üîÑ –°–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏:', {
        from: prevSubscription.current,
        to: currentSub
      });

      // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π –ø–æ–¥–ø–∏—Å–∫–∏
      if (prevSubscription.current) {
        unsubscribe();
      }

      // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É
      if (symbol && timeframe) {
        subscribe(symbol, timeframe);
      }

      prevSubscription.current = currentSub;
    }
  }, [symbol, timeframe, subscribe, unsubscribe]);

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
  useEffect(() => {
    if (lastUpdate) {
      console.log('[LegacyChartAdapter] üì° Real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:', {
        symbol: lastUpdate.symbol,
        interval: lastUpdate.interval,
        timestamp: new Date(lastUpdate.timestamp).toISOString(),
        close: lastUpdate.close,
        isClosed: lastUpdate.isClosed
      });
    }
  }, [lastUpdate]);

  // –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π loading —Å—Ç–∞—Ç—É—Å
  const isDataLoading = cryptoLoading || astroLoading;

  // –ö–ª—é—á –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è ChartComponent
  const chartKey = `${symbol}-${timeframe}`;

  return (
    <ChartComponent
      key={chartKey} // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏ —Å–º–µ–Ω–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
      symbol={symbol}
      timeframe={timeframe}
      height={height}
      className={className}
      cryptoData={enhancedCryptoData}
      astronomicalEvents={astronomicalEvents}
      eventFilters={eventFilters}
      isLoading={isDataLoading}
      realTimeData={lastUpdate}
    />
  );
}; 