import { useState, useEffect } from 'react';
import { AstronomicalEvent, astronomicalEventsService } from '../services/astronomicalEvents';

interface UseAstronomicalEventsResult {
  events: AstronomicalEvent[];
  loading: boolean;
  error: string | null;
  currentMoonPhase: string;
}

export function useAstronomicalEvents(
  startDate: Date, 
  endDate: Date
): UseAstronomicalEventsResult {
  const [events, setEvents] = useState<AstronomicalEvent[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [currentMoonPhase, setCurrentMoonPhase] = useState<string>('üåô');

  useEffect(() => {
    const calculateEvents = async () => {
      try {
        setLoading(true);
        setError(null);

        console.log(`[useAstronomicalEvents] üåô –†–∞—Å—á–µ—Ç –∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π: ${startDate.toDateString()} - ${endDate.toDateString()}`);

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è
        const calculatedEvents = astronomicalEventsService.getEventsForPeriod(startDate, endDate);
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ñ–∞–∑—É –ª—É–Ω—ã
        const moonPhase = astronomicalEventsService.getMoonPhaseForDate(new Date());
        
        console.log(`[useAstronomicalEvents] ‚ú® –ù–∞–π–¥–µ–Ω–æ ${calculatedEvents.length} –∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π`);
        console.log(`[useAstronomicalEvents] üåô –¢–µ–∫—É—â–∞—è —Ñ–∞–∑–∞ –ª—É–Ω—ã: ${moonPhase}`);
        console.log(`[useAstronomicalEvents] üìÖ Sample events:`, calculatedEvents.slice(0, 3).map(e => ({
          name: e.name,
          timestamp: new Date(e.timestamp).toISOString(),
          type: e.type
        })));

        setEvents(calculatedEvents);
        setCurrentMoonPhase(moonPhase);

      } catch (err) {
        const errorMsg = err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –∞—Å—Ç—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π';
        console.error('[useAstronomicalEvents] ‚ùå –û—à–∏–±–∫–∞:', err);
        setError(errorMsg);
      } finally {
        setLoading(false);
      }
    };

    if (startDate && endDate) {
      calculateEvents();
    }
  }, [startDate, endDate]); // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∞–º–∏ –æ–±—ä–µ–∫—Ç—ã Date, –æ–Ω–∏ —Ç–µ–ø–µ—Ä—å —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã

  return {
    events,
    loading,
    error,
    currentMoonPhase
  };
} 